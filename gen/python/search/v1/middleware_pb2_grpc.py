# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from search.v1 import app_message_pb2 as search_dot_v1_dot_app__message__pb2
from search.v1 import middleware_pb2 as search_dot_v1_dot_middleware__pb2


class PrivateMiddlewareServiceStub(object):
    """
    This service is what a Middleware exposes to its local users (not on the internet.)
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterChannel = channel.unary_unary(
                '/search.v1.PrivateMiddlewareService/RegisterChannel',
                request_serializer=search_dot_v1_dot_middleware__pb2.RegisterChannelRequest.SerializeToString,
                response_deserializer=search_dot_v1_dot_middleware__pb2.RegisterChannelResponse.FromString,
                )
        self.RegisterApp = channel.unary_stream(
                '/search.v1.PrivateMiddlewareService/RegisterApp',
                request_serializer=search_dot_v1_dot_middleware__pb2.RegisterAppRequest.SerializeToString,
                response_deserializer=search_dot_v1_dot_middleware__pb2.RegisterAppResponse.FromString,
                )
        self.CloseChannel = channel.unary_unary(
                '/search.v1.PrivateMiddlewareService/CloseChannel',
                request_serializer=search_dot_v1_dot_middleware__pb2.CloseChannelRequest.SerializeToString,
                response_deserializer=search_dot_v1_dot_middleware__pb2.CloseChannelResponse.FromString,
                )
        self.AppSend = channel.unary_unary(
                '/search.v1.PrivateMiddlewareService/AppSend',
                request_serializer=search_dot_v1_dot_app__message__pb2.AppSendRequest.SerializeToString,
                response_deserializer=search_dot_v1_dot_middleware__pb2.AppSendResponse.FromString,
                )
        self.AppRecv = channel.unary_unary(
                '/search.v1.PrivateMiddlewareService/AppRecv',
                request_serializer=search_dot_v1_dot_middleware__pb2.AppRecvRequest.SerializeToString,
                response_deserializer=search_dot_v1_dot_app__message__pb2.AppRecvResponse.FromString,
                )


class PrivateMiddlewareServiceServicer(object):
    """
    This service is what a Middleware exposes to its local users (not on the internet.)
    """

    def RegisterChannel(self, request, context):
        """This is used by a requires point to start a new channel with a requirement contract.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterApp(self, request, context):
        """This is used by provider services to register their provision contract with the Registry/Broker.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CloseChannel(self, request, context):
        """This is used by local app (be it a Service Client or a Service Provider) to close a channel.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AppSend(self, request, context):
        """This is used by the local app to communicate with other participants in an already
        initiated or registered channel
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AppRecv(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PrivateMiddlewareServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterChannel,
                    request_deserializer=search_dot_v1_dot_middleware__pb2.RegisterChannelRequest.FromString,
                    response_serializer=search_dot_v1_dot_middleware__pb2.RegisterChannelResponse.SerializeToString,
            ),
            'RegisterApp': grpc.unary_stream_rpc_method_handler(
                    servicer.RegisterApp,
                    request_deserializer=search_dot_v1_dot_middleware__pb2.RegisterAppRequest.FromString,
                    response_serializer=search_dot_v1_dot_middleware__pb2.RegisterAppResponse.SerializeToString,
            ),
            'CloseChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.CloseChannel,
                    request_deserializer=search_dot_v1_dot_middleware__pb2.CloseChannelRequest.FromString,
                    response_serializer=search_dot_v1_dot_middleware__pb2.CloseChannelResponse.SerializeToString,
            ),
            'AppSend': grpc.unary_unary_rpc_method_handler(
                    servicer.AppSend,
                    request_deserializer=search_dot_v1_dot_app__message__pb2.AppSendRequest.FromString,
                    response_serializer=search_dot_v1_dot_middleware__pb2.AppSendResponse.SerializeToString,
            ),
            'AppRecv': grpc.unary_unary_rpc_method_handler(
                    servicer.AppRecv,
                    request_deserializer=search_dot_v1_dot_middleware__pb2.AppRecvRequest.FromString,
                    response_serializer=search_dot_v1_dot_app__message__pb2.AppRecvResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'search.v1.PrivateMiddlewareService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PrivateMiddlewareService(object):
    """
    This service is what a Middleware exposes to its local users (not on the internet.)
    """

    @staticmethod
    def RegisterChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/search.v1.PrivateMiddlewareService/RegisterChannel',
            search_dot_v1_dot_middleware__pb2.RegisterChannelRequest.SerializeToString,
            search_dot_v1_dot_middleware__pb2.RegisterChannelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegisterApp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/search.v1.PrivateMiddlewareService/RegisterApp',
            search_dot_v1_dot_middleware__pb2.RegisterAppRequest.SerializeToString,
            search_dot_v1_dot_middleware__pb2.RegisterAppResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CloseChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/search.v1.PrivateMiddlewareService/CloseChannel',
            search_dot_v1_dot_middleware__pb2.CloseChannelRequest.SerializeToString,
            search_dot_v1_dot_middleware__pb2.CloseChannelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AppSend(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/search.v1.PrivateMiddlewareService/AppSend',
            search_dot_v1_dot_app__message__pb2.AppSendRequest.SerializeToString,
            search_dot_v1_dot_middleware__pb2.AppSendResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AppRecv(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/search.v1.PrivateMiddlewareService/AppRecv',
            search_dot_v1_dot_middleware__pb2.AppRecvRequest.SerializeToString,
            search_dot_v1_dot_app__message__pb2.AppRecvResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class PublicMiddlewareServiceStub(object):
    """
    This service is what a Middleware exposes to external components (other participants and the broker)
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.InitChannel = channel.unary_unary(
                '/search.v1.PublicMiddlewareService/InitChannel',
                request_serializer=search_dot_v1_dot_middleware__pb2.InitChannelRequest.SerializeToString,
                response_deserializer=search_dot_v1_dot_middleware__pb2.InitChannelResponse.FromString,
                )
        self.StartChannel = channel.unary_unary(
                '/search.v1.PublicMiddlewareService/StartChannel',
                request_serializer=search_dot_v1_dot_middleware__pb2.StartChannelRequest.SerializeToString,
                response_deserializer=search_dot_v1_dot_middleware__pb2.StartChannelResponse.FromString,
                )
        self.MessageExchange = channel.stream_unary(
                '/search.v1.PublicMiddlewareService/MessageExchange',
                request_serializer=search_dot_v1_dot_app__message__pb2.MessageExchangeRequest.SerializeToString,
                response_deserializer=search_dot_v1_dot_middleware__pb2.MessageExchangeResponse.FromString,
                )


class PublicMiddlewareServiceServicer(object):
    """
    This service is what a Middleware exposes to external components (other participants and the broker)
    """

    def InitChannel(self, request, context):
        """The Broker, when a new channel is registered, signals all providers with this
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartChannel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MessageExchange(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PublicMiddlewareServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'InitChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.InitChannel,
                    request_deserializer=search_dot_v1_dot_middleware__pb2.InitChannelRequest.FromString,
                    response_serializer=search_dot_v1_dot_middleware__pb2.InitChannelResponse.SerializeToString,
            ),
            'StartChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.StartChannel,
                    request_deserializer=search_dot_v1_dot_middleware__pb2.StartChannelRequest.FromString,
                    response_serializer=search_dot_v1_dot_middleware__pb2.StartChannelResponse.SerializeToString,
            ),
            'MessageExchange': grpc.stream_unary_rpc_method_handler(
                    servicer.MessageExchange,
                    request_deserializer=search_dot_v1_dot_app__message__pb2.MessageExchangeRequest.FromString,
                    response_serializer=search_dot_v1_dot_middleware__pb2.MessageExchangeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'search.v1.PublicMiddlewareService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PublicMiddlewareService(object):
    """
    This service is what a Middleware exposes to external components (other participants and the broker)
    """

    @staticmethod
    def InitChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/search.v1.PublicMiddlewareService/InitChannel',
            search_dot_v1_dot_middleware__pb2.InitChannelRequest.SerializeToString,
            search_dot_v1_dot_middleware__pb2.InitChannelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/search.v1.PublicMiddlewareService/StartChannel',
            search_dot_v1_dot_middleware__pb2.StartChannelRequest.SerializeToString,
            search_dot_v1_dot_middleware__pb2.StartChannelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MessageExchange(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/search.v1.PublicMiddlewareService/MessageExchange',
            search_dot_v1_dot_app__message__pb2.MessageExchangeRequest.SerializeToString,
            search_dot_v1_dot_middleware__pb2.MessageExchangeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

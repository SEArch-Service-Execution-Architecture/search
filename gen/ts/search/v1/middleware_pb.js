// @generated by protoc-gen-es v1.3.3
// @generated from file search/v1/middleware.proto (package search.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";
import { GlobalContract, LocalContract } from "./contracts_pb.js";
import { RemoteParticipant } from "./broker_pb.js";

/**
 * @generated from message search.v1.AppSendResponse
 */
export const AppSendResponse = proto3.makeMessageType(
  "search.v1.AppSendResponse",
  () => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(AppSendResponse_Result) },
  ],
);

/**
 * @generated from enum search.v1.AppSendResponse.Result
 */
export const AppSendResponse_Result = proto3.makeEnum(
  "search.v1.AppSendResponse.Result",
  [
    {no: 0, name: "RESULT_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "RESULT_OK", localName: "OK"},
    {no: 2, name: "RESULT_ERR", localName: "ERR"},
  ],
);

/**
 * @generated from message search.v1.AppRecvRequest
 */
export const AppRecvRequest = proto3.makeMessageType(
  "search.v1.AppRecvRequest",
  () => [
    { no: 1, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "participant", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message search.v1.RegisterChannelRequest
 */
export const RegisterChannelRequest = proto3.makeMessageType(
  "search.v1.RegisterChannelRequest",
  () => [
    { no: 1, name: "requirements_contract", kind: "message", T: GlobalContract },
    { no: 2, name: "preset_participants", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: RemoteParticipant} },
  ],
);

/**
 * @generated from message search.v1.RegisterChannelResponse
 */
export const RegisterChannelResponse = proto3.makeMessageType(
  "search.v1.RegisterChannelResponse",
  () => [
    { no: 1, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message search.v1.RegisterAppRequest
 */
export const RegisterAppRequest = proto3.makeMessageType(
  "search.v1.RegisterAppRequest",
  () => [
    { no: 1, name: "provider_contract", kind: "message", T: LocalContract },
  ],
);

/**
 * whenever a new channel that involves this app is started, the middleware needs to notify the local app
 *
 * @generated from message search.v1.RegisterAppResponse
 */
export const RegisterAppResponse = proto3.makeMessageType(
  "search.v1.RegisterAppResponse",
  () => [
    { no: 1, name: "app_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "ack_or_new" },
    { no: 2, name: "notification", kind: "message", T: InitChannelNotification, oneof: "ack_or_new" },
  ],
);

/**
 * this is what a registered app receives whenever a new channel is initiated for that app
 * the app has to communicate with the middleware using UseChannel with this new channel_id
 *
 * @generated from message search.v1.InitChannelNotification
 */
export const InitChannelNotification = proto3.makeMessageType(
  "search.v1.InitChannelNotification",
  () => [
    { no: 1, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * This is something that is sent by the Broker to providers to notify that a new channel is starting
 *
 * @generated from message search.v1.InitChannelRequest
 */
export const InitChannelRequest = proto3.makeMessageType(
  "search.v1.InitChannelRequest",
  () => [
    { no: 1, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "app_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "participants", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: RemoteParticipant} },
  ],
);

/**
 * @generated from message search.v1.InitChannelResponse
 */
export const InitChannelResponse = proto3.makeMessageType(
  "search.v1.InitChannelResponse",
  () => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(InitChannelResponse_Result) },
  ],
);

/**
 * @generated from enum search.v1.InitChannelResponse.Result
 */
export const InitChannelResponse_Result = proto3.makeEnum(
  "search.v1.InitChannelResponse.Result",
  [
    {no: 0, name: "RESULT_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "RESULT_ACK", localName: "ACK"},
    {no: 2, name: "RESULT_ERR", localName: "ERR"},
  ],
);

/**
 * @generated from message search.v1.StartChannelRequest
 */
export const StartChannelRequest = proto3.makeMessageType(
  "search.v1.StartChannelRequest",
  () => [
    { no: 1, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "app_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message search.v1.StartChannelResponse
 */
export const StartChannelResponse = proto3.makeMessageType(
  "search.v1.StartChannelResponse",
  () => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(StartChannelResponse_Result) },
  ],
);

/**
 * @generated from enum search.v1.StartChannelResponse.Result
 */
export const StartChannelResponse_Result = proto3.makeEnum(
  "search.v1.StartChannelResponse.Result",
  [
    {no: 0, name: "RESULT_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "RESULT_ACK", localName: "ACK"},
    {no: 2, name: "RESULT_ERR", localName: "ERR"},
  ],
);

/**
 * @generated from message search.v1.CloseChannelRequest
 */
export const CloseChannelRequest = proto3.makeMessageType(
  "search.v1.CloseChannelRequest",
  () => [
    { no: 1, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message search.v1.CloseChannelResponse
 */
export const CloseChannelResponse = proto3.makeMessageType(
  "search.v1.CloseChannelResponse",
  () => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(CloseChannelResponse_Result) },
    { no: 2, name: "error_message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "participants_with_pending_inbound", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * @generated from enum search.v1.CloseChannelResponse.Result
 */
export const CloseChannelResponse_Result = proto3.makeEnum(
  "search.v1.CloseChannelResponse.Result",
  [
    {no: 0, name: "RESULT_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "RESULT_CLOSED", localName: "CLOSED"},
    {no: 2, name: "RESULT_PENDING_INBOUND", localName: "PENDING_INBOUND"},
    {no: 3, name: "RESULT_PENDING_OUTBOUND", localName: "PENDING_OUTBOUND"},
  ],
);

/**
 * @generated from message search.v1.MessageExchangeResponse
 */
export const MessageExchangeResponse = proto3.makeMessageType(
  "search.v1.MessageExchangeResponse",
  () => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(MessageExchangeResponse_Result) },
    { no: 2, name: "error_message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from enum search.v1.MessageExchangeResponse.Result
 */
export const MessageExchangeResponse_Result = proto3.makeEnum(
  "search.v1.MessageExchangeResponse.Result",
  [
    {no: 0, name: "RESULT_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "RESULT_OK", localName: "OK"},
    {no: 2, name: "RESULT_ERROR", localName: "ERROR"},
  ],
);


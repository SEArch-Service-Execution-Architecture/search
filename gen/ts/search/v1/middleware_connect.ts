// @generated by protoc-gen-connect-es v1.1.3 with parameter "target=ts"
// @generated from file search/v1/middleware.proto (package search.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { AppRecvRequest, AppSendResponse, CloseChannelRequest, CloseChannelResponse, InitChannelRequest, InitChannelResponse, MessageExchangeResponse, RegisterAppRequest, RegisterAppResponse, RegisterChannelRequest, RegisterChannelResponse, StartChannelRequest, StartChannelResponse } from "./middleware_pb.js";
import { MethodKind } from "@bufbuild/protobuf";
import { AppRecvResponse, AppSendRequest, MessageExchangeRequest } from "./app_message_pb.js";

/**
 *
 * This service is what a Middleware exposes to its local users (not on the internet.)
 *
 * @generated from service search.v1.PrivateMiddlewareService
 */
export const PrivateMiddlewareService = {
  typeName: "search.v1.PrivateMiddlewareService",
  methods: {
    /**
     * This is used by a requires point to start a new channel with a requirement contract.
     *
     * @generated from rpc search.v1.PrivateMiddlewareService.RegisterChannel
     */
    registerChannel: {
      name: "RegisterChannel",
      I: RegisterChannelRequest,
      O: RegisterChannelResponse,
      kind: MethodKind.Unary,
    },
    /**
     * This is used by provider services to register their provision contract with the Registry/Broker.
     *
     * @generated from rpc search.v1.PrivateMiddlewareService.RegisterApp
     */
    registerApp: {
      name: "RegisterApp",
      I: RegisterAppRequest,
      O: RegisterAppResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * This is used by local app (be it a Service Client or a Service Provider) to close a channel.
     *
     * @generated from rpc search.v1.PrivateMiddlewareService.CloseChannel
     */
    closeChannel: {
      name: "CloseChannel",
      I: CloseChannelRequest,
      O: CloseChannelResponse,
      kind: MethodKind.Unary,
    },
    /**
     * This is used by the local app to communicate with other participants in an already
     * initiated or registered channel
     *
     * @generated from rpc search.v1.PrivateMiddlewareService.AppSend
     */
    appSend: {
      name: "AppSend",
      I: AppSendRequest,
      O: AppSendResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc search.v1.PrivateMiddlewareService.AppRecv
     */
    appRecv: {
      name: "AppRecv",
      I: AppRecvRequest,
      O: AppRecvResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

/**
 *
 * This service is what a Middleware exposes to external components (other participants and the broker)
 *
 * @generated from service search.v1.PublicMiddlewareService
 */
export const PublicMiddlewareService = {
  typeName: "search.v1.PublicMiddlewareService",
  methods: {
    /**
     * The Broker, when a new channel is registered, signals all providers with this
     *
     * @generated from rpc search.v1.PublicMiddlewareService.InitChannel
     */
    initChannel: {
      name: "InitChannel",
      I: InitChannelRequest,
      O: InitChannelResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc search.v1.PublicMiddlewareService.StartChannel
     */
    startChannel: {
      name: "StartChannel",
      I: StartChannelRequest,
      O: StartChannelResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc search.v1.PublicMiddlewareService.MessageExchange
     */
    messageExchange: {
      name: "MessageExchange",
      I: MessageExchangeRequest,
      O: MessageExchangeResponse,
      kind: MethodKind.ClientStreaming,
    },
  }
} as const;


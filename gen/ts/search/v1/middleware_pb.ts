// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file search/v1/middleware.proto (package search.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { GlobalContract, LocalContract } from "./contracts_pb.js";
import { RemoteParticipant } from "./broker_pb.js";

/**
 * @generated from message search.v1.AppSendResponse
 */
export class AppSendResponse extends Message<AppSendResponse> {
  /**
   * @generated from field: search.v1.AppSendResponse.Result result = 1;
   */
  result = AppSendResponse_Result.UNSPECIFIED;

  constructor(data?: PartialMessage<AppSendResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search.v1.AppSendResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(AppSendResponse_Result) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AppSendResponse {
    return new AppSendResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AppSendResponse {
    return new AppSendResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AppSendResponse {
    return new AppSendResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AppSendResponse | PlainMessage<AppSendResponse> | undefined, b: AppSendResponse | PlainMessage<AppSendResponse> | undefined): boolean {
    return proto3.util.equals(AppSendResponse, a, b);
  }
}

/**
 * @generated from enum search.v1.AppSendResponse.Result
 */
export enum AppSendResponse_Result {
  /**
   * @generated from enum value: RESULT_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: RESULT_OK = 1;
   */
  OK = 1,

  /**
   * @generated from enum value: RESULT_ERR = 2;
   */
  ERR = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(AppSendResponse_Result)
proto3.util.setEnumType(AppSendResponse_Result, "search.v1.AppSendResponse.Result", [
  { no: 0, name: "RESULT_UNSPECIFIED" },
  { no: 1, name: "RESULT_OK" },
  { no: 2, name: "RESULT_ERR" },
]);

/**
 * @generated from message search.v1.AppRecvRequest
 */
export class AppRecvRequest extends Message<AppRecvRequest> {
  /**
   * @generated from field: string channel_id = 1;
   */
  channelId = "";

  /**
   * @generated from field: string participant = 2;
   */
  participant = "";

  constructor(data?: PartialMessage<AppRecvRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search.v1.AppRecvRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "participant", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AppRecvRequest {
    return new AppRecvRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AppRecvRequest {
    return new AppRecvRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AppRecvRequest {
    return new AppRecvRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AppRecvRequest | PlainMessage<AppRecvRequest> | undefined, b: AppRecvRequest | PlainMessage<AppRecvRequest> | undefined): boolean {
    return proto3.util.equals(AppRecvRequest, a, b);
  }
}

/**
 * @generated from message search.v1.RegisterChannelRequest
 */
export class RegisterChannelRequest extends Message<RegisterChannelRequest> {
  /**
   * @generated from field: search.v1.GlobalContract requirements_contract = 1;
   */
  requirementsContract?: GlobalContract;

  /**
   * Mapping of participants that we don't want brokered.
   *
   * @generated from field: map<string, search.v1.RemoteParticipant> preset_participants = 2;
   */
  presetParticipants: { [key: string]: RemoteParticipant } = {};

  constructor(data?: PartialMessage<RegisterChannelRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search.v1.RegisterChannelRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "requirements_contract", kind: "message", T: GlobalContract },
    { no: 2, name: "preset_participants", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: RemoteParticipant} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterChannelRequest {
    return new RegisterChannelRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterChannelRequest {
    return new RegisterChannelRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterChannelRequest {
    return new RegisterChannelRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterChannelRequest | PlainMessage<RegisterChannelRequest> | undefined, b: RegisterChannelRequest | PlainMessage<RegisterChannelRequest> | undefined): boolean {
    return proto3.util.equals(RegisterChannelRequest, a, b);
  }
}

/**
 * @generated from message search.v1.RegisterChannelResponse
 */
export class RegisterChannelResponse extends Message<RegisterChannelResponse> {
  /**
   * @generated from field: string channel_id = 1;
   */
  channelId = "";

  constructor(data?: PartialMessage<RegisterChannelResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search.v1.RegisterChannelResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterChannelResponse {
    return new RegisterChannelResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterChannelResponse {
    return new RegisterChannelResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterChannelResponse {
    return new RegisterChannelResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterChannelResponse | PlainMessage<RegisterChannelResponse> | undefined, b: RegisterChannelResponse | PlainMessage<RegisterChannelResponse> | undefined): boolean {
    return proto3.util.equals(RegisterChannelResponse, a, b);
  }
}

/**
 * @generated from message search.v1.RegisterAppRequest
 */
export class RegisterAppRequest extends Message<RegisterAppRequest> {
  /**
   * @generated from field: search.v1.LocalContract provider_contract = 1;
   */
  providerContract?: LocalContract;

  constructor(data?: PartialMessage<RegisterAppRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search.v1.RegisterAppRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "provider_contract", kind: "message", T: LocalContract },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterAppRequest {
    return new RegisterAppRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterAppRequest {
    return new RegisterAppRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterAppRequest {
    return new RegisterAppRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterAppRequest | PlainMessage<RegisterAppRequest> | undefined, b: RegisterAppRequest | PlainMessage<RegisterAppRequest> | undefined): boolean {
    return proto3.util.equals(RegisterAppRequest, a, b);
  }
}

/**
 * whenever a new channel that involves this app is started, the middleware needs to notify the local app
 *
 * @generated from message search.v1.RegisterAppResponse
 */
export class RegisterAppResponse extends Message<RegisterAppResponse> {
  /**
   * @generated from oneof search.v1.RegisterAppResponse.ack_or_new
   */
  ackOrNew: {
    /**
     * @generated from field: string app_id = 1;
     */
    value: string;
    case: "appId";
  } | {
    /**
     * @generated from field: search.v1.InitChannelNotification notification = 2;
     */
    value: InitChannelNotification;
    case: "notification";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<RegisterAppResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search.v1.RegisterAppResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "app_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "ack_or_new" },
    { no: 2, name: "notification", kind: "message", T: InitChannelNotification, oneof: "ack_or_new" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterAppResponse {
    return new RegisterAppResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterAppResponse {
    return new RegisterAppResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterAppResponse {
    return new RegisterAppResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterAppResponse | PlainMessage<RegisterAppResponse> | undefined, b: RegisterAppResponse | PlainMessage<RegisterAppResponse> | undefined): boolean {
    return proto3.util.equals(RegisterAppResponse, a, b);
  }
}

/**
 * this is what a registered app receives whenever a new channel is initiated for that app
 * the app has to communicate with the middleware using UseChannel with this new channel_id
 *
 * @generated from message search.v1.InitChannelNotification
 */
export class InitChannelNotification extends Message<InitChannelNotification> {
  /**
   * @generated from field: string channel_id = 1;
   */
  channelId = "";

  constructor(data?: PartialMessage<InitChannelNotification>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search.v1.InitChannelNotification";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InitChannelNotification {
    return new InitChannelNotification().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InitChannelNotification {
    return new InitChannelNotification().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InitChannelNotification {
    return new InitChannelNotification().fromJsonString(jsonString, options);
  }

  static equals(a: InitChannelNotification | PlainMessage<InitChannelNotification> | undefined, b: InitChannelNotification | PlainMessage<InitChannelNotification> | undefined): boolean {
    return proto3.util.equals(InitChannelNotification, a, b);
  }
}

/**
 * This is something that is sent by the Broker to providers to notify that a new channel is starting
 *
 * @generated from message search.v1.InitChannelRequest
 */
export class InitChannelRequest extends Message<InitChannelRequest> {
  /**
   * @generated from field: string channel_id = 1;
   */
  channelId = "";

  /**
   * which app behind the middleware is being notified
   *
   * @generated from field: string app_id = 2;
   */
  appId = "";

  /**
   * int32 seq = 4; // sequence number (used because we may need multiple rounds until all participants are ready)
   *
   * @generated from field: map<string, search.v1.RemoteParticipant> participants = 3;
   */
  participants: { [key: string]: RemoteParticipant } = {};

  constructor(data?: PartialMessage<InitChannelRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search.v1.InitChannelRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "app_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "participants", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: RemoteParticipant} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InitChannelRequest {
    return new InitChannelRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InitChannelRequest {
    return new InitChannelRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InitChannelRequest {
    return new InitChannelRequest().fromJsonString(jsonString, options);
  }

  static equals(a: InitChannelRequest | PlainMessage<InitChannelRequest> | undefined, b: InitChannelRequest | PlainMessage<InitChannelRequest> | undefined): boolean {
    return proto3.util.equals(InitChannelRequest, a, b);
  }
}

/**
 * @generated from message search.v1.InitChannelResponse
 */
export class InitChannelResponse extends Message<InitChannelResponse> {
  /**
   * @generated from field: search.v1.InitChannelResponse.Result result = 1;
   */
  result = InitChannelResponse_Result.UNSPECIFIED;

  constructor(data?: PartialMessage<InitChannelResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search.v1.InitChannelResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(InitChannelResponse_Result) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InitChannelResponse {
    return new InitChannelResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InitChannelResponse {
    return new InitChannelResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InitChannelResponse {
    return new InitChannelResponse().fromJsonString(jsonString, options);
  }

  static equals(a: InitChannelResponse | PlainMessage<InitChannelResponse> | undefined, b: InitChannelResponse | PlainMessage<InitChannelResponse> | undefined): boolean {
    return proto3.util.equals(InitChannelResponse, a, b);
  }
}

/**
 * @generated from enum search.v1.InitChannelResponse.Result
 */
export enum InitChannelResponse_Result {
  /**
   * @generated from enum value: RESULT_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: RESULT_ACK = 1;
   */
  ACK = 1,

  /**
   * @generated from enum value: RESULT_ERR = 2;
   */
  ERR = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(InitChannelResponse_Result)
proto3.util.setEnumType(InitChannelResponse_Result, "search.v1.InitChannelResponse.Result", [
  { no: 0, name: "RESULT_UNSPECIFIED" },
  { no: 1, name: "RESULT_ACK" },
  { no: 2, name: "RESULT_ERR" },
]);

/**
 * @generated from message search.v1.StartChannelRequest
 */
export class StartChannelRequest extends Message<StartChannelRequest> {
  /**
   * @generated from field: string channel_id = 1;
   */
  channelId = "";

  /**
   * @generated from field: string app_id = 2;
   */
  appId = "";

  constructor(data?: PartialMessage<StartChannelRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search.v1.StartChannelRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "app_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartChannelRequest {
    return new StartChannelRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartChannelRequest {
    return new StartChannelRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartChannelRequest {
    return new StartChannelRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StartChannelRequest | PlainMessage<StartChannelRequest> | undefined, b: StartChannelRequest | PlainMessage<StartChannelRequest> | undefined): boolean {
    return proto3.util.equals(StartChannelRequest, a, b);
  }
}

/**
 * @generated from message search.v1.StartChannelResponse
 */
export class StartChannelResponse extends Message<StartChannelResponse> {
  /**
   * @generated from field: search.v1.StartChannelResponse.Result result = 1;
   */
  result = StartChannelResponse_Result.UNSPECIFIED;

  constructor(data?: PartialMessage<StartChannelResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search.v1.StartChannelResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(StartChannelResponse_Result) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartChannelResponse {
    return new StartChannelResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartChannelResponse {
    return new StartChannelResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartChannelResponse {
    return new StartChannelResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StartChannelResponse | PlainMessage<StartChannelResponse> | undefined, b: StartChannelResponse | PlainMessage<StartChannelResponse> | undefined): boolean {
    return proto3.util.equals(StartChannelResponse, a, b);
  }
}

/**
 * @generated from enum search.v1.StartChannelResponse.Result
 */
export enum StartChannelResponse_Result {
  /**
   * @generated from enum value: RESULT_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: RESULT_ACK = 1;
   */
  ACK = 1,

  /**
   * @generated from enum value: RESULT_ERR = 2;
   */
  ERR = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(StartChannelResponse_Result)
proto3.util.setEnumType(StartChannelResponse_Result, "search.v1.StartChannelResponse.Result", [
  { no: 0, name: "RESULT_UNSPECIFIED" },
  { no: 1, name: "RESULT_ACK" },
  { no: 2, name: "RESULT_ERR" },
]);

/**
 * @generated from message search.v1.CloseChannelRequest
 */
export class CloseChannelRequest extends Message<CloseChannelRequest> {
  /**
   * @generated from field: string channel_id = 1;
   */
  channelId = "";

  constructor(data?: PartialMessage<CloseChannelRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search.v1.CloseChannelRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CloseChannelRequest {
    return new CloseChannelRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CloseChannelRequest {
    return new CloseChannelRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CloseChannelRequest {
    return new CloseChannelRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CloseChannelRequest | PlainMessage<CloseChannelRequest> | undefined, b: CloseChannelRequest | PlainMessage<CloseChannelRequest> | undefined): boolean {
    return proto3.util.equals(CloseChannelRequest, a, b);
  }
}

/**
 * @generated from message search.v1.CloseChannelResponse
 */
export class CloseChannelResponse extends Message<CloseChannelResponse> {
  /**
   * @generated from field: search.v1.CloseChannelResponse.Result result = 1;
   */
  result = CloseChannelResponse_Result.UNSPECIFIED;

  /**
   * @generated from field: string error_message = 2;
   */
  errorMessage = "";

  /**
   * @generated from field: repeated string participants_with_pending_inbound = 3;
   */
  participantsWithPendingInbound: string[] = [];

  constructor(data?: PartialMessage<CloseChannelResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search.v1.CloseChannelResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(CloseChannelResponse_Result) },
    { no: 2, name: "error_message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "participants_with_pending_inbound", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CloseChannelResponse {
    return new CloseChannelResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CloseChannelResponse {
    return new CloseChannelResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CloseChannelResponse {
    return new CloseChannelResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CloseChannelResponse | PlainMessage<CloseChannelResponse> | undefined, b: CloseChannelResponse | PlainMessage<CloseChannelResponse> | undefined): boolean {
    return proto3.util.equals(CloseChannelResponse, a, b);
  }
}

/**
 * @generated from enum search.v1.CloseChannelResponse.Result
 */
export enum CloseChannelResponse_Result {
  /**
   * @generated from enum value: RESULT_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: RESULT_CLOSED = 1;
   */
  CLOSED = 1,

  /**
   * @generated from enum value: RESULT_PENDING_INBOUND = 2;
   */
  PENDING_INBOUND = 2,

  /**
   * @generated from enum value: RESULT_PENDING_OUTBOUND = 3;
   */
  PENDING_OUTBOUND = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(CloseChannelResponse_Result)
proto3.util.setEnumType(CloseChannelResponse_Result, "search.v1.CloseChannelResponse.Result", [
  { no: 0, name: "RESULT_UNSPECIFIED" },
  { no: 1, name: "RESULT_CLOSED" },
  { no: 2, name: "RESULT_PENDING_INBOUND" },
  { no: 3, name: "RESULT_PENDING_OUTBOUND" },
]);

/**
 * @generated from message search.v1.MessageExchangeResponse
 */
export class MessageExchangeResponse extends Message<MessageExchangeResponse> {
  /**
   * @generated from field: search.v1.MessageExchangeResponse.Result result = 1;
   */
  result = MessageExchangeResponse_Result.UNSPECIFIED;

  /**
   * @generated from field: string error_message = 2;
   */
  errorMessage = "";

  constructor(data?: PartialMessage<MessageExchangeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search.v1.MessageExchangeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(MessageExchangeResponse_Result) },
    { no: 2, name: "error_message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageExchangeResponse {
    return new MessageExchangeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageExchangeResponse {
    return new MessageExchangeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageExchangeResponse {
    return new MessageExchangeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MessageExchangeResponse | PlainMessage<MessageExchangeResponse> | undefined, b: MessageExchangeResponse | PlainMessage<MessageExchangeResponse> | undefined): boolean {
    return proto3.util.equals(MessageExchangeResponse, a, b);
  }
}

/**
 * @generated from enum search.v1.MessageExchangeResponse.Result
 */
export enum MessageExchangeResponse_Result {
  /**
   * @generated from enum value: RESULT_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: RESULT_OK = 1;
   */
  OK = 1,

  /**
   * @generated from enum value: RESULT_ERROR = 2;
   */
  ERROR = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(MessageExchangeResponse_Result)
proto3.util.setEnumType(MessageExchangeResponse_Result, "search.v1.MessageExchangeResponse.Result", [
  { no: 0, name: "RESULT_UNSPECIFIED" },
  { no: 1, name: "RESULT_OK" },
  { no: 2, name: "RESULT_ERROR" },
]);


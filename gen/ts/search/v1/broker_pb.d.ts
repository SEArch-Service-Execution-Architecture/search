// @generated by protoc-gen-es v1.3.3
// @generated from file search/v1/broker.proto (package search.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { GlobalContract, LocalContract } from "./contracts_pb.js";

/**
 * @generated from message search.v1.BrokerChannelRequest
 */
export declare class BrokerChannelRequest extends Message<BrokerChannelRequest> {
  /**
   * requirements contract
   *
   * @generated from field: search.v1.GlobalContract contract = 1;
   */
  contract?: GlobalContract;

  /**
   * subset of contract's participants that are already decided. This should at least
   * include the initiator's RemoteParticpant data
   *
   * @generated from field: map<string, search.v1.RemoteParticipant> preset_participants = 2;
   */
  presetParticipants: { [key: string]: RemoteParticipant };

  constructor(data?: PartialMessage<BrokerChannelRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "search.v1.BrokerChannelRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BrokerChannelRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BrokerChannelRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BrokerChannelRequest;

  static equals(a: BrokerChannelRequest | PlainMessage<BrokerChannelRequest> | undefined, b: BrokerChannelRequest | PlainMessage<BrokerChannelRequest> | undefined): boolean;
}

/**
 * @generated from message search.v1.BrokerChannelResponse
 */
export declare class BrokerChannelResponse extends Message<BrokerChannelResponse> {
  /**
   * uuidv4
   *
   * @generated from field: string channel_id = 2;
   */
  channelId: string;

  /**
   * preset + brokered participants
   *
   * @generated from field: map<string, search.v1.RemoteParticipant> participants = 3;
   */
  participants: { [key: string]: RemoteParticipant };

  constructor(data?: PartialMessage<BrokerChannelResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "search.v1.BrokerChannelResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BrokerChannelResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BrokerChannelResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BrokerChannelResponse;

  static equals(a: BrokerChannelResponse | PlainMessage<BrokerChannelResponse> | undefined, b: BrokerChannelResponse | PlainMessage<BrokerChannelResponse> | undefined): boolean;
}

/**
 * @generated from message search.v1.RegisterProviderRequest
 */
export declare class RegisterProviderRequest extends Message<RegisterProviderRequest> {
  /**
   * @generated from field: search.v1.LocalContract contract = 1;
   */
  contract?: LocalContract;

  /**
   * @generated from field: string url = 2;
   */
  url: string;

  constructor(data?: PartialMessage<RegisterProviderRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "search.v1.RegisterProviderRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterProviderRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterProviderRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterProviderRequest;

  static equals(a: RegisterProviderRequest | PlainMessage<RegisterProviderRequest> | undefined, b: RegisterProviderRequest | PlainMessage<RegisterProviderRequest> | undefined): boolean;
}

/**
 * The registry assigns the provider an ID
 *
 * @generated from message search.v1.RegisterProviderResponse
 */
export declare class RegisterProviderResponse extends Message<RegisterProviderResponse> {
  /**
   * @generated from field: string app_id = 1;
   */
  appId: string;

  constructor(data?: PartialMessage<RegisterProviderResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "search.v1.RegisterProviderResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterProviderResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterProviderResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterProviderResponse;

  static equals(a: RegisterProviderResponse | PlainMessage<RegisterProviderResponse> | undefined, b: RegisterProviderResponse | PlainMessage<RegisterProviderResponse> | undefined): boolean;
}

/**
 * @generated from message search.v1.RemoteParticipant
 */
export declare class RemoteParticipant extends Message<RemoteParticipant> {
  /**
   * points to the middleware for this participant
   *
   * @generated from field: string url = 1;
   */
  url: string;

  /**
   * points to the specific app that is served by the middleware
   *
   * @generated from field: string app_id = 2;
   */
  appId: string;

  constructor(data?: PartialMessage<RemoteParticipant>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "search.v1.RemoteParticipant";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoteParticipant;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoteParticipant;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoteParticipant;

  static equals(a: RemoteParticipant | PlainMessage<RemoteParticipant> | undefined, b: RemoteParticipant | PlainMessage<RemoteParticipant> | undefined): boolean;
}


// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file search/v1/app_message.proto (package search.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * This is what will be exchanged between middlewares
 *
 * @generated from message search.v1.MessageExchangeRequest
 */
export class MessageExchangeRequest extends Message<MessageExchangeRequest> {
  /**
   * We'll use UUIDv4. It's a global ID shared by all participants
   *
   * @generated from field: string channel_id = 1;
   */
  channelId = "";

  /**
   * This is necessary because URLs don't univocally determine apps. There can be multiple applications
   * behind the same middleware (there is a 1:1 mapping between URLs and middlewares)
   *
   * appid de app emisora
   *
   * @generated from field: string sender_id = 2;
   */
  senderId = "";

  /**
   * appid de app receptora
   *
   * @generated from field: string recipient_id = 3;
   */
  recipientId = "";

  /**
   * @generated from field: search.v1.AppMessage content = 4;
   */
  content?: AppMessage;

  constructor(data?: PartialMessage<MessageExchangeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search.v1.MessageExchangeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sender_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "recipient_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "content", kind: "message", T: AppMessage },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageExchangeRequest {
    return new MessageExchangeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageExchangeRequest {
    return new MessageExchangeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageExchangeRequest {
    return new MessageExchangeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MessageExchangeRequest | PlainMessage<MessageExchangeRequest> | undefined, b: MessageExchangeRequest | PlainMessage<MessageExchangeRequest> | undefined): boolean {
    return proto3.util.equals(MessageExchangeRequest, a, b);
  }
}

/**
 * This is what will be sent from an app to the middleware
 *
 * @generated from message search.v1.AppSendRequest
 */
export class AppSendRequest extends Message<AppSendRequest> {
  /**
   * @generated from field: string channel_id = 1;
   */
  channelId = "";

  /**
   * name of the recipient in the local contract
   *
   * @generated from field: string recipient = 2;
   */
  recipient = "";

  /**
   * @generated from field: search.v1.AppMessage message = 3;
   */
  message?: AppMessage;

  constructor(data?: PartialMessage<AppSendRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search.v1.AppSendRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "recipient", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "message", kind: "message", T: AppMessage },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AppSendRequest {
    return new AppSendRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AppSendRequest {
    return new AppSendRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AppSendRequest {
    return new AppSendRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AppSendRequest | PlainMessage<AppSendRequest> | undefined, b: AppSendRequest | PlainMessage<AppSendRequest> | undefined): boolean {
    return proto3.util.equals(AppSendRequest, a, b);
  }
}

/**
 * This is what will be sent from the middleware to a local app
 *
 * @generated from message search.v1.AppRecvResponse
 */
export class AppRecvResponse extends Message<AppRecvResponse> {
  /**
   * @generated from field: string channel_id = 1;
   */
  channelId = "";

  /**
   * name of the sender in the local contract
   *
   * @generated from field: string sender = 2;
   */
  sender = "";

  /**
   * @generated from field: search.v1.AppMessage message = 3;
   */
  message?: AppMessage;

  constructor(data?: PartialMessage<AppRecvResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search.v1.AppRecvResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "message", kind: "message", T: AppMessage },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AppRecvResponse {
    return new AppRecvResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AppRecvResponse {
    return new AppRecvResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AppRecvResponse {
    return new AppRecvResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AppRecvResponse | PlainMessage<AppRecvResponse> | undefined, b: AppRecvResponse | PlainMessage<AppRecvResponse> | undefined): boolean {
    return proto3.util.equals(AppRecvResponse, a, b);
  }
}

/**
 * This is the message content that is sent by the app (this is copied as-is by the middlewares)
 * TODO: we may want to use self-describing messages to have a rich type system for messages!
 * https://protobuf.dev/programming-guides/techniques/#self-description
 *
 * @generated from message search.v1.AppMessage
 */
export class AppMessage extends Message<AppMessage> {
  /**
   * @generated from field: string type = 1;
   */
  type = "";

  /**
   * @generated from field: bytes body = 2;
   */
  body = new Uint8Array(0);

  constructor(data?: PartialMessage<AppMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "search.v1.AppMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "body", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AppMessage {
    return new AppMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AppMessage {
    return new AppMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AppMessage {
    return new AppMessage().fromJsonString(jsonString, options);
  }

  static equals(a: AppMessage | PlainMessage<AppMessage> | undefined, b: AppMessage | PlainMessage<AppMessage> | undefined): boolean {
    return proto3.util.equals(AppMessage, a, b);
  }
}


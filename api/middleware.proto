syntax = "proto3";
package api;

import "api/app_message.proto";
import "api/contracts.proto";
import "api/broker.proto";

option go_package = "github.com/clpombo/search/api";


/* 
    This service is what a Middleware exposes to its local users (not on the internet.)
*/
service PrivateMiddleware {
    // This is used by the initiator to register a new channel
    rpc RegisterChannel(RegisterChannelRequest) returns(RegisterChannelResponse) {}

    // This is used by the local app to register an app with the registry
    rpc RegisterApp(RegisterAppRequest) returns (stream RegisterAppResponse) {}
    
    // This is used by the local app to communicate with other participants in an already
    // initiated or registered channel
    rpc AppSend(ApplicationMessageOut) returns (AppSendResponse) {}
    rpc AppRecv(AppRecvRequest) returns (ApplicationMessageIn) {}

    
}

enum Result {
    OK = 0;
    ERR = 1;
}

message AppSendResponse {
    Result result = 1;
}

message AppRecvRequest {
    string channel_id = 1;
    string participant = 2;
}

message RegisterChannelRequest {
    Contract requirements_contract = 1;
}

message RegisterChannelResponse {
    string channel_id = 1;
}

message RegisterAppRequest {
    Contract provider_contract = 1;
}

// whenever a new channel that involves this app is started, the middleware needs to notify the local app
message RegisterAppResponse {
    oneof ack_or_new {
        string app_id = 1;
        InitChannelNotification notification = 2;
    }
    // TODO: error codes ?
}

// this is what a registered app receives whenever a new channel is initiated for that app
// the app has to communicate with the middleware using UseChannel with this new channel_id
message InitChannelNotification {
    string channel_id = 1;
}

/*
    This service is what a Middleware exposes to external components (other participants and the broker)
*/
service PublicMiddleware {
    // The Broker, when a new channel is registered, signals all participants (except initiator) with this
    rpc InitChannel(InitChannelRequest) returns(InitChannelResponse) {}
    rpc StartChannel(StartChannelRequest) returns(StartChannelResponse) {}
    rpc MessageExchange (stream ApplicationMessageWithHeaders) returns (stream ApplicationMessageWithHeaders) {}
}


// This is something that is sent by the Broker to providers to notify that a new channel is starting
message InitChannelRequest {
    string channel_id = 1;
    string app_id = 2; // which app behind the middleware is being notified
    map<string, RemoteParticipant> participants = 3;
    // int32 seq = 4; // sequence number (used because we may need multiple rounds until all participants are ready)
}

message InitChannelResponse {
    enum Result {
        ACK = 0;
        ERR = 1;
    }
    Result result = 1;
}

message StartChannelRequest {
    string channel_id = 1;
    string app_id = 2;
}

message StartChannelResponse {
    enum Result {
        ACK = 0;
        ERR = 1;
    }
    Result result = 1;
}
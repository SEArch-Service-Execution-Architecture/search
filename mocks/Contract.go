// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Contract is an autogenerated mock type for the Contract type
type Contract struct {
	mock.Mock
}

type Contract_Expecter struct {
	mock *mock.Mock
}

func (_m *Contract) EXPECT() *Contract_Expecter {
	return &Contract_Expecter{mock: &_m.Mock}
}

// GetBytesRepr provides a mock function with given fields:
func (_m *Contract) GetBytesRepr() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBytesRepr")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// Contract_GetBytesRepr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBytesRepr'
type Contract_GetBytesRepr_Call struct {
	*mock.Call
}

// GetBytesRepr is a helper method to define mock.On call
func (_e *Contract_Expecter) GetBytesRepr() *Contract_GetBytesRepr_Call {
	return &Contract_GetBytesRepr_Call{Call: _e.mock.On("GetBytesRepr")}
}

func (_c *Contract_GetBytesRepr_Call) Run(run func()) *Contract_GetBytesRepr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Contract_GetBytesRepr_Call) Return(_a0 []byte) *Contract_GetBytesRepr_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Contract_GetBytesRepr_Call) RunAndReturn(run func() []byte) *Contract_GetBytesRepr_Call {
	_c.Call.Return(run)
	return _c
}

// GetContractID provides a mock function with given fields:
func (_m *Contract) GetContractID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetContractID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Contract_GetContractID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContractID'
type Contract_GetContractID_Call struct {
	*mock.Call
}

// GetContractID is a helper method to define mock.On call
func (_e *Contract_Expecter) GetContractID() *Contract_GetContractID_Call {
	return &Contract_GetContractID_Call{Call: _e.mock.On("GetContractID")}
}

func (_c *Contract_GetContractID_Call) Run(run func()) *Contract_GetContractID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Contract_GetContractID_Call) Return(_a0 string) *Contract_GetContractID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Contract_GetContractID_Call) RunAndReturn(run func() string) *Contract_GetContractID_Call {
	_c.Call.Return(run)
	return _c
}

// GetRemoteParticipantNames provides a mock function with given fields:
func (_m *Contract) GetRemoteParticipantNames() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRemoteParticipantNames")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// Contract_GetRemoteParticipantNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRemoteParticipantNames'
type Contract_GetRemoteParticipantNames_Call struct {
	*mock.Call
}

// GetRemoteParticipantNames is a helper method to define mock.On call
func (_e *Contract_Expecter) GetRemoteParticipantNames() *Contract_GetRemoteParticipantNames_Call {
	return &Contract_GetRemoteParticipantNames_Call{Call: _e.mock.On("GetRemoteParticipantNames")}
}

func (_c *Contract_GetRemoteParticipantNames_Call) Run(run func()) *Contract_GetRemoteParticipantNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Contract_GetRemoteParticipantNames_Call) Return(_a0 []string) *Contract_GetRemoteParticipantNames_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Contract_GetRemoteParticipantNames_Call) RunAndReturn(run func() []string) *Contract_GetRemoteParticipantNames_Call {
	_c.Call.Return(run)
	return _c
}

// NewContract creates a new instance of Contract. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewContract(t interface {
	mock.TestingT
	Cleanup(func())
}) *Contract {
	mock := &Contract{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	contract "github.com/pmontepagano/search/contract"
	mock "github.com/stretchr/testify/mock"

	v1 "github.com/pmontepagano/search/gen/go/search/v1"
)

// LocalContract is an autogenerated mock type for the LocalContract type
type LocalContract struct {
	mock.Mock
}

type LocalContract_Expecter struct {
	mock *mock.Mock
}

func (_m *LocalContract) EXPECT() *LocalContract_Expecter {
	return &LocalContract_Expecter{mock: &_m.Mock}
}

// Convert provides a mock function with given fields: _a0
func (_m *LocalContract) Convert(_a0 v1.LocalContractFormat) (contract.LocalContract, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Convert")
	}

	var r0 contract.LocalContract
	var r1 error
	if rf, ok := ret.Get(0).(func(v1.LocalContractFormat) (contract.LocalContract, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(v1.LocalContractFormat) contract.LocalContract); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(contract.LocalContract)
		}
	}

	if rf, ok := ret.Get(1).(func(v1.LocalContractFormat) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LocalContract_Convert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Convert'
type LocalContract_Convert_Call struct {
	*mock.Call
}

// Convert is a helper method to define mock.On call
//   - _a0 v1.LocalContractFormat
func (_e *LocalContract_Expecter) Convert(_a0 interface{}) *LocalContract_Convert_Call {
	return &LocalContract_Convert_Call{Call: _e.mock.On("Convert", _a0)}
}

func (_c *LocalContract_Convert_Call) Run(run func(_a0 v1.LocalContractFormat)) *LocalContract_Convert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(v1.LocalContractFormat))
	})
	return _c
}

func (_c *LocalContract_Convert_Call) Return(_a0 contract.LocalContract, _a1 error) *LocalContract_Convert_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LocalContract_Convert_Call) RunAndReturn(run func(v1.LocalContractFormat) (contract.LocalContract, error)) *LocalContract_Convert_Call {
	_c.Call.Return(run)
	return _c
}

// GetBytesRepr provides a mock function with given fields:
func (_m *LocalContract) GetBytesRepr() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBytesRepr")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// LocalContract_GetBytesRepr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBytesRepr'
type LocalContract_GetBytesRepr_Call struct {
	*mock.Call
}

// GetBytesRepr is a helper method to define mock.On call
func (_e *LocalContract_Expecter) GetBytesRepr() *LocalContract_GetBytesRepr_Call {
	return &LocalContract_GetBytesRepr_Call{Call: _e.mock.On("GetBytesRepr")}
}

func (_c *LocalContract_GetBytesRepr_Call) Run(run func()) *LocalContract_GetBytesRepr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LocalContract_GetBytesRepr_Call) Return(_a0 []byte) *LocalContract_GetBytesRepr_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LocalContract_GetBytesRepr_Call) RunAndReturn(run func() []byte) *LocalContract_GetBytesRepr_Call {
	_c.Call.Return(run)
	return _c
}

// GetContractID provides a mock function with given fields:
func (_m *LocalContract) GetContractID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetContractID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// LocalContract_GetContractID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContractID'
type LocalContract_GetContractID_Call struct {
	*mock.Call
}

// GetContractID is a helper method to define mock.On call
func (_e *LocalContract_Expecter) GetContractID() *LocalContract_GetContractID_Call {
	return &LocalContract_GetContractID_Call{Call: _e.mock.On("GetContractID")}
}

func (_c *LocalContract_GetContractID_Call) Run(run func()) *LocalContract_GetContractID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LocalContract_GetContractID_Call) Return(_a0 string) *LocalContract_GetContractID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LocalContract_GetContractID_Call) RunAndReturn(run func() string) *LocalContract_GetContractID_Call {
	_c.Call.Return(run)
	return _c
}

// GetFormat provides a mock function with given fields:
func (_m *LocalContract) GetFormat() v1.LocalContractFormat {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFormat")
	}

	var r0 v1.LocalContractFormat
	if rf, ok := ret.Get(0).(func() v1.LocalContractFormat); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1.LocalContractFormat)
	}

	return r0
}

// LocalContract_GetFormat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFormat'
type LocalContract_GetFormat_Call struct {
	*mock.Call
}

// GetFormat is a helper method to define mock.On call
func (_e *LocalContract_Expecter) GetFormat() *LocalContract_GetFormat_Call {
	return &LocalContract_GetFormat_Call{Call: _e.mock.On("GetFormat")}
}

func (_c *LocalContract_GetFormat_Call) Run(run func()) *LocalContract_GetFormat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LocalContract_GetFormat_Call) Return(_a0 v1.LocalContractFormat) *LocalContract_GetFormat_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LocalContract_GetFormat_Call) RunAndReturn(run func() v1.LocalContractFormat) *LocalContract_GetFormat_Call {
	_c.Call.Return(run)
	return _c
}

// GetRemoteParticipantNames provides a mock function with given fields:
func (_m *LocalContract) GetRemoteParticipantNames() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRemoteParticipantNames")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// LocalContract_GetRemoteParticipantNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRemoteParticipantNames'
type LocalContract_GetRemoteParticipantNames_Call struct {
	*mock.Call
}

// GetRemoteParticipantNames is a helper method to define mock.On call
func (_e *LocalContract_Expecter) GetRemoteParticipantNames() *LocalContract_GetRemoteParticipantNames_Call {
	return &LocalContract_GetRemoteParticipantNames_Call{Call: _e.mock.On("GetRemoteParticipantNames")}
}

func (_c *LocalContract_GetRemoteParticipantNames_Call) Run(run func()) *LocalContract_GetRemoteParticipantNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LocalContract_GetRemoteParticipantNames_Call) Return(_a0 []string) *LocalContract_GetRemoteParticipantNames_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LocalContract_GetRemoteParticipantNames_Call) RunAndReturn(run func() []string) *LocalContract_GetRemoteParticipantNames_Call {
	_c.Call.Return(run)
	return _c
}

// NewLocalContract creates a new instance of LocalContract. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLocalContract(t interface {
	mock.TestingT
	Cleanup(func())
}) *LocalContract {
	mock := &LocalContract{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

syntax = "proto3";
package protobuf;

import "protobuf/app_message.proto";

option go_package = "dc.uba.ar/this/search/protobuf";

/* 
    A ProviderMiddleware can have multiple Provider Applications registered.
    This service is what a Middleware exposes to the external network.
*/
service ProviderMiddleware {
    // The Broker, when a new channel is registered, signals all participants (except initiator) with this
    rpc InitSession(InitSessionRequest) returns(InitSessionResponse) {}


    rpc ApplicationMessaging(stream ApplicationMessage) returns (stream ApplicationMessage) {}
}

// This is something that is sent by the Broker to notify that a new channel is starting
message InitSessionRequest {
    string session_id = 1;
    string app_id = 2;
    map<string, RemoteParticipant> participants = 3;
}

message InitSessionResponse {

}




/* 
    This is what the middleware exposes internally to its users.
*/
service InternalProviderMiddleware {
    rpc RegisterApp(RegisterAppRequest) returns (ProviderRegistrationACK) {}

}

message RegisterAppRequest {
    string provider_contract = 1;
}

// This is what the provider app receives when registration is successful
message ProviderRegistrationACK {
    string app_id = 1;
}
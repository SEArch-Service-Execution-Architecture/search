// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ProviderMiddlewareClient is the client API for ProviderMiddleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProviderMiddlewareClient interface {
	InitSession(ctx context.Context, in *InitSessionRequest, opts ...grpc.CallOption) (*InitSessionResponse, error)
	ApplicationMessaging(ctx context.Context, opts ...grpc.CallOption) (ProviderMiddleware_ApplicationMessagingClient, error)
}

type providerMiddlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewProviderMiddlewareClient(cc grpc.ClientConnInterface) ProviderMiddlewareClient {
	return &providerMiddlewareClient{cc}
}

func (c *providerMiddlewareClient) InitSession(ctx context.Context, in *InitSessionRequest, opts ...grpc.CallOption) (*InitSessionResponse, error) {
	out := new(InitSessionResponse)
	err := c.cc.Invoke(ctx, "/protobuf.ProviderMiddleware/InitSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerMiddlewareClient) ApplicationMessaging(ctx context.Context, opts ...grpc.CallOption) (ProviderMiddleware_ApplicationMessagingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProviderMiddleware_serviceDesc.Streams[0], "/protobuf.ProviderMiddleware/ApplicationMessaging", opts...)
	if err != nil {
		return nil, err
	}
	x := &providerMiddlewareApplicationMessagingClient{stream}
	return x, nil
}

type ProviderMiddleware_ApplicationMessagingClient interface {
	Send(*ApplicationMessage) error
	Recv() (*ApplicationMessage, error)
	grpc.ClientStream
}

type providerMiddlewareApplicationMessagingClient struct {
	grpc.ClientStream
}

func (x *providerMiddlewareApplicationMessagingClient) Send(m *ApplicationMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *providerMiddlewareApplicationMessagingClient) Recv() (*ApplicationMessage, error) {
	m := new(ApplicationMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProviderMiddlewareServer is the server API for ProviderMiddleware service.
// All implementations must embed UnimplementedProviderMiddlewareServer
// for forward compatibility
type ProviderMiddlewareServer interface {
	InitSession(context.Context, *InitSessionRequest) (*InitSessionResponse, error)
	ApplicationMessaging(ProviderMiddleware_ApplicationMessagingServer) error
	mustEmbedUnimplementedProviderMiddlewareServer()
}

// UnimplementedProviderMiddlewareServer must be embedded to have forward compatible implementations.
type UnimplementedProviderMiddlewareServer struct {
}

func (*UnimplementedProviderMiddlewareServer) InitSession(context.Context, *InitSessionRequest) (*InitSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitSession not implemented")
}
func (*UnimplementedProviderMiddlewareServer) ApplicationMessaging(ProviderMiddleware_ApplicationMessagingServer) error {
	return status.Errorf(codes.Unimplemented, "method ApplicationMessaging not implemented")
}
func (*UnimplementedProviderMiddlewareServer) mustEmbedUnimplementedProviderMiddlewareServer() {}

func RegisterProviderMiddlewareServer(s *grpc.Server, srv ProviderMiddlewareServer) {
	s.RegisterService(&_ProviderMiddleware_serviceDesc, srv)
}

func _ProviderMiddleware_InitSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderMiddlewareServer).InitSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ProviderMiddleware/InitSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderMiddlewareServer).InitSession(ctx, req.(*InitSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderMiddleware_ApplicationMessaging_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProviderMiddlewareServer).ApplicationMessaging(&providerMiddlewareApplicationMessagingServer{stream})
}

type ProviderMiddleware_ApplicationMessagingServer interface {
	Send(*ApplicationMessage) error
	Recv() (*ApplicationMessage, error)
	grpc.ServerStream
}

type providerMiddlewareApplicationMessagingServer struct {
	grpc.ServerStream
}

func (x *providerMiddlewareApplicationMessagingServer) Send(m *ApplicationMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *providerMiddlewareApplicationMessagingServer) Recv() (*ApplicationMessage, error) {
	m := new(ApplicationMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ProviderMiddleware_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.ProviderMiddleware",
	HandlerType: (*ProviderMiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitSession",
			Handler:    _ProviderMiddleware_InitSession_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ApplicationMessaging",
			Handler:       _ProviderMiddleware_ApplicationMessaging_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protobuf/providermiddleware.proto",
}

// InternalProviderMiddlewareClient is the client API for InternalProviderMiddleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InternalProviderMiddlewareClient interface {
	RegisterApp(ctx context.Context, in *RegisterAppRequest, opts ...grpc.CallOption) (*ProviderRegistrationACK, error)
}

type internalProviderMiddlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewInternalProviderMiddlewareClient(cc grpc.ClientConnInterface) InternalProviderMiddlewareClient {
	return &internalProviderMiddlewareClient{cc}
}

func (c *internalProviderMiddlewareClient) RegisterApp(ctx context.Context, in *RegisterAppRequest, opts ...grpc.CallOption) (*ProviderRegistrationACK, error) {
	out := new(ProviderRegistrationACK)
	err := c.cc.Invoke(ctx, "/protobuf.InternalProviderMiddleware/RegisterApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InternalProviderMiddlewareServer is the server API for InternalProviderMiddleware service.
// All implementations must embed UnimplementedInternalProviderMiddlewareServer
// for forward compatibility
type InternalProviderMiddlewareServer interface {
	RegisterApp(context.Context, *RegisterAppRequest) (*ProviderRegistrationACK, error)
	mustEmbedUnimplementedInternalProviderMiddlewareServer()
}

// UnimplementedInternalProviderMiddlewareServer must be embedded to have forward compatible implementations.
type UnimplementedInternalProviderMiddlewareServer struct {
}

func (*UnimplementedInternalProviderMiddlewareServer) RegisterApp(context.Context, *RegisterAppRequest) (*ProviderRegistrationACK, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterApp not implemented")
}
func (*UnimplementedInternalProviderMiddlewareServer) mustEmbedUnimplementedInternalProviderMiddlewareServer() {
}

func RegisterInternalProviderMiddlewareServer(s *grpc.Server, srv InternalProviderMiddlewareServer) {
	s.RegisterService(&_InternalProviderMiddleware_serviceDesc, srv)
}

func _InternalProviderMiddleware_RegisterApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalProviderMiddlewareServer).RegisterApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.InternalProviderMiddleware/RegisterApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalProviderMiddlewareServer).RegisterApp(ctx, req.(*RegisterAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _InternalProviderMiddleware_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.InternalProviderMiddleware",
	HandlerType: (*InternalProviderMiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterApp",
			Handler:    _InternalProviderMiddleware_RegisterApp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/providermiddleware.proto",
}

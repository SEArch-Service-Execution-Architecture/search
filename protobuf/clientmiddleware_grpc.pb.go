// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ClientMiddlewareClient is the client API for ClientMiddleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientMiddlewareClient interface {
	RegisterChannel(ctx context.Context, in *RegisterChannelRequest, opts ...grpc.CallOption) (*RegisterChannelResponse, error)
	UseChannel(ctx context.Context, opts ...grpc.CallOption) (ClientMiddleware_UseChannelClient, error)
}

type clientMiddlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewClientMiddlewareClient(cc grpc.ClientConnInterface) ClientMiddlewareClient {
	return &clientMiddlewareClient{cc}
}

func (c *clientMiddlewareClient) RegisterChannel(ctx context.Context, in *RegisterChannelRequest, opts ...grpc.CallOption) (*RegisterChannelResponse, error) {
	out := new(RegisterChannelResponse)
	err := c.cc.Invoke(ctx, "/protobuf.ClientMiddleware/RegisterChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientMiddlewareClient) UseChannel(ctx context.Context, opts ...grpc.CallOption) (ClientMiddleware_UseChannelClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ClientMiddleware_serviceDesc.Streams[0], "/protobuf.ClientMiddleware/UseChannel", opts...)
	if err != nil {
		return nil, err
	}
	x := &clientMiddlewareUseChannelClient{stream}
	return x, nil
}

type ClientMiddleware_UseChannelClient interface {
	Send(*ApplicationMessage) error
	Recv() (*ApplicationMessage, error)
	grpc.ClientStream
}

type clientMiddlewareUseChannelClient struct {
	grpc.ClientStream
}

func (x *clientMiddlewareUseChannelClient) Send(m *ApplicationMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clientMiddlewareUseChannelClient) Recv() (*ApplicationMessage, error) {
	m := new(ApplicationMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClientMiddlewareServer is the server API for ClientMiddleware service.
// All implementations must embed UnimplementedClientMiddlewareServer
// for forward compatibility
type ClientMiddlewareServer interface {
	RegisterChannel(context.Context, *RegisterChannelRequest) (*RegisterChannelResponse, error)
	UseChannel(ClientMiddleware_UseChannelServer) error
	mustEmbedUnimplementedClientMiddlewareServer()
}

// UnimplementedClientMiddlewareServer must be embedded to have forward compatible implementations.
type UnimplementedClientMiddlewareServer struct {
}

func (*UnimplementedClientMiddlewareServer) RegisterChannel(context.Context, *RegisterChannelRequest) (*RegisterChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterChannel not implemented")
}
func (*UnimplementedClientMiddlewareServer) UseChannel(ClientMiddleware_UseChannelServer) error {
	return status.Errorf(codes.Unimplemented, "method UseChannel not implemented")
}
func (*UnimplementedClientMiddlewareServer) mustEmbedUnimplementedClientMiddlewareServer() {}

func RegisterClientMiddlewareServer(s *grpc.Server, srv ClientMiddlewareServer) {
	s.RegisterService(&_ClientMiddleware_serviceDesc, srv)
}

func _ClientMiddleware_RegisterChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientMiddlewareServer).RegisterChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ClientMiddleware/RegisterChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientMiddlewareServer).RegisterChannel(ctx, req.(*RegisterChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientMiddleware_UseChannel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClientMiddlewareServer).UseChannel(&clientMiddlewareUseChannelServer{stream})
}

type ClientMiddleware_UseChannelServer interface {
	Send(*ApplicationMessage) error
	Recv() (*ApplicationMessage, error)
	grpc.ServerStream
}

type clientMiddlewareUseChannelServer struct {
	grpc.ServerStream
}

func (x *clientMiddlewareUseChannelServer) Send(m *ApplicationMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clientMiddlewareUseChannelServer) Recv() (*ApplicationMessage, error) {
	m := new(ApplicationMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ClientMiddleware_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.ClientMiddleware",
	HandlerType: (*ClientMiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterChannel",
			Handler:    _ClientMiddleware_RegisterChannel_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UseChannel",
			Handler:       _ClientMiddleware_UseChannel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protobuf/clientmiddleware.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BrokerClient is the client API for Broker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BrokerClient interface {
	GetCompatibleParticipants(ctx context.Context, in *RequirementsContract, opts ...grpc.CallOption) (*BrokerResult, error)
}

type brokerClient struct {
	cc grpc.ClientConnInterface
}

func NewBrokerClient(cc grpc.ClientConnInterface) BrokerClient {
	return &brokerClient{cc}
}

func (c *brokerClient) GetCompatibleParticipants(ctx context.Context, in *RequirementsContract, opts ...grpc.CallOption) (*BrokerResult, error) {
	out := new(BrokerResult)
	err := c.cc.Invoke(ctx, "/protobuf.Broker/GetCompatibleParticipants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BrokerServer is the server API for Broker service.
// All implementations must embed UnimplementedBrokerServer
// for forward compatibility
type BrokerServer interface {
	GetCompatibleParticipants(context.Context, *RequirementsContract) (*BrokerResult, error)
	mustEmbedUnimplementedBrokerServer()
}

// UnimplementedBrokerServer must be embedded to have forward compatible implementations.
type UnimplementedBrokerServer struct {
}

func (*UnimplementedBrokerServer) GetCompatibleParticipants(context.Context, *RequirementsContract) (*BrokerResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompatibleParticipants not implemented")
}
func (*UnimplementedBrokerServer) mustEmbedUnimplementedBrokerServer() {}

func RegisterBrokerServer(s *grpc.Server, srv BrokerServer) {
	s.RegisterService(&_Broker_serviceDesc, srv)
}

func _Broker_GetCompatibleParticipants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequirementsContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServer).GetCompatibleParticipants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Broker/GetCompatibleParticipants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServer).GetCompatibleParticipants(ctx, req.(*RequirementsContract))
	}
	return interceptor(ctx, in, info, handler)
}

var _Broker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.Broker",
	HandlerType: (*BrokerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCompatibleParticipants",
			Handler:    _Broker_GetCompatibleParticipants_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/broker.proto",
}

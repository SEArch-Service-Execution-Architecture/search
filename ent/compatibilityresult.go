// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/clpombo/search/ent/compatibilityresult"
	"github.com/clpombo/search/ent/registeredcontract"
)

// CompatibilityResult is the model entity for the CompatibilityResult schema.
type CompatibilityResult struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ReqContractID holds the value of the "req_contract_id" field.
	ReqContractID string `json:"req_contract_id,omitempty"`
	// ProvContractID holds the value of the "prov_contract_id" field.
	ProvContractID string `json:"prov_contract_id,omitempty"`
	// ParticipantNameReq holds the value of the "participant_name_req" field.
	ParticipantNameReq string `json:"participant_name_req,omitempty"`
	// ParticipantNameProv holds the value of the "participant_name_prov" field.
	ParticipantNameProv string `json:"participant_name_prov,omitempty"`
	// Result holds the value of the "result" field.
	Result bool `json:"result,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CompatibilityResultQuery when eager-loading is set.
	Edges        CompatibilityResultEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CompatibilityResultEdges holds the relations/edges for other nodes in the graph.
type CompatibilityResultEdges struct {
	// RequirementContract holds the value of the requirement_contract edge.
	RequirementContract *RegisteredContract `json:"requirement_contract,omitempty"`
	// ProviderContract holds the value of the provider_contract edge.
	ProviderContract *RegisteredContract `json:"provider_contract,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// RequirementContractOrErr returns the RequirementContract value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CompatibilityResultEdges) RequirementContractOrErr() (*RegisteredContract, error) {
	if e.loadedTypes[0] {
		if e.RequirementContract == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: registeredcontract.Label}
		}
		return e.RequirementContract, nil
	}
	return nil, &NotLoadedError{edge: "requirement_contract"}
}

// ProviderContractOrErr returns the ProviderContract value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CompatibilityResultEdges) ProviderContractOrErr() (*RegisteredContract, error) {
	if e.loadedTypes[1] {
		if e.ProviderContract == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: registeredcontract.Label}
		}
		return e.ProviderContract, nil
	}
	return nil, &NotLoadedError{edge: "provider_contract"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CompatibilityResult) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case compatibilityresult.FieldResult:
			values[i] = new(sql.NullBool)
		case compatibilityresult.FieldID:
			values[i] = new(sql.NullInt64)
		case compatibilityresult.FieldReqContractID, compatibilityresult.FieldProvContractID, compatibilityresult.FieldParticipantNameReq, compatibilityresult.FieldParticipantNameProv:
			values[i] = new(sql.NullString)
		case compatibilityresult.FieldCreatedAt, compatibilityresult.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CompatibilityResult fields.
func (cr *CompatibilityResult) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case compatibilityresult.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cr.ID = int(value.Int64)
		case compatibilityresult.FieldReqContractID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field req_contract_id", values[i])
			} else if value.Valid {
				cr.ReqContractID = value.String
			}
		case compatibilityresult.FieldProvContractID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field prov_contract_id", values[i])
			} else if value.Valid {
				cr.ProvContractID = value.String
			}
		case compatibilityresult.FieldParticipantNameReq:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field participant_name_req", values[i])
			} else if value.Valid {
				cr.ParticipantNameReq = value.String
			}
		case compatibilityresult.FieldParticipantNameProv:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field participant_name_prov", values[i])
			} else if value.Valid {
				cr.ParticipantNameProv = value.String
			}
		case compatibilityresult.FieldResult:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field result", values[i])
			} else if value.Valid {
				cr.Result = value.Bool
			}
		case compatibilityresult.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cr.CreatedAt = value.Time
			}
		case compatibilityresult.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cr.UpdatedAt = value.Time
			}
		default:
			cr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CompatibilityResult.
// This includes values selected through modifiers, order, etc.
func (cr *CompatibilityResult) Value(name string) (ent.Value, error) {
	return cr.selectValues.Get(name)
}

// QueryRequirementContract queries the "requirement_contract" edge of the CompatibilityResult entity.
func (cr *CompatibilityResult) QueryRequirementContract() *RegisteredContractQuery {
	return NewCompatibilityResultClient(cr.config).QueryRequirementContract(cr)
}

// QueryProviderContract queries the "provider_contract" edge of the CompatibilityResult entity.
func (cr *CompatibilityResult) QueryProviderContract() *RegisteredContractQuery {
	return NewCompatibilityResultClient(cr.config).QueryProviderContract(cr)
}

// Update returns a builder for updating this CompatibilityResult.
// Note that you need to call CompatibilityResult.Unwrap() before calling this method if this CompatibilityResult
// was returned from a transaction, and the transaction was committed or rolled back.
func (cr *CompatibilityResult) Update() *CompatibilityResultUpdateOne {
	return NewCompatibilityResultClient(cr.config).UpdateOne(cr)
}

// Unwrap unwraps the CompatibilityResult entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cr *CompatibilityResult) Unwrap() *CompatibilityResult {
	_tx, ok := cr.config.driver.(*txDriver)
	if !ok {
		panic("ent: CompatibilityResult is not a transactional entity")
	}
	cr.config.driver = _tx.drv
	return cr
}

// String implements the fmt.Stringer.
func (cr *CompatibilityResult) String() string {
	var builder strings.Builder
	builder.WriteString("CompatibilityResult(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cr.ID))
	builder.WriteString("req_contract_id=")
	builder.WriteString(cr.ReqContractID)
	builder.WriteString(", ")
	builder.WriteString("prov_contract_id=")
	builder.WriteString(cr.ProvContractID)
	builder.WriteString(", ")
	builder.WriteString("participant_name_req=")
	builder.WriteString(cr.ParticipantNameReq)
	builder.WriteString(", ")
	builder.WriteString("participant_name_prov=")
	builder.WriteString(cr.ParticipantNameProv)
	builder.WriteString(", ")
	builder.WriteString("result=")
	builder.WriteString(fmt.Sprintf("%v", cr.Result))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(cr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cr.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CompatibilityResults is a parsable slice of CompatibilityResult.
type CompatibilityResults []*CompatibilityResult

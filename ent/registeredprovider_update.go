// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"net/url"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/clpombo/search/ent/predicate"
	"github.com/clpombo/search/ent/registeredcontract"
	"github.com/clpombo/search/ent/registeredprovider"
)

// RegisteredProviderUpdate is the builder for updating RegisteredProvider entities.
type RegisteredProviderUpdate struct {
	config
	hooks    []Hook
	mutation *RegisteredProviderMutation
}

// Where appends a list predicates to the RegisteredProviderUpdate builder.
func (rpu *RegisteredProviderUpdate) Where(ps ...predicate.RegisteredProvider) *RegisteredProviderUpdate {
	rpu.mutation.Where(ps...)
	return rpu
}

// SetURL sets the "url" field.
func (rpu *RegisteredProviderUpdate) SetURL(u *url.URL) *RegisteredProviderUpdate {
	rpu.mutation.SetURL(u)
	return rpu
}

// SetParticipantName sets the "participant_name" field.
func (rpu *RegisteredProviderUpdate) SetParticipantName(s string) *RegisteredProviderUpdate {
	rpu.mutation.SetParticipantName(s)
	return rpu
}

// SetContractID sets the "contract_id" field.
func (rpu *RegisteredProviderUpdate) SetContractID(s string) *RegisteredProviderUpdate {
	rpu.mutation.SetContractID(s)
	return rpu
}

// SetUpdatedAt sets the "updated_at" field.
func (rpu *RegisteredProviderUpdate) SetUpdatedAt(t time.Time) *RegisteredProviderUpdate {
	rpu.mutation.SetUpdatedAt(t)
	return rpu
}

// SetContract sets the "contract" edge to the RegisteredContract entity.
func (rpu *RegisteredProviderUpdate) SetContract(r *RegisteredContract) *RegisteredProviderUpdate {
	return rpu.SetContractID(r.ID)
}

// Mutation returns the RegisteredProviderMutation object of the builder.
func (rpu *RegisteredProviderUpdate) Mutation() *RegisteredProviderMutation {
	return rpu.mutation
}

// ClearContract clears the "contract" edge to the RegisteredContract entity.
func (rpu *RegisteredProviderUpdate) ClearContract() *RegisteredProviderUpdate {
	rpu.mutation.ClearContract()
	return rpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rpu *RegisteredProviderUpdate) Save(ctx context.Context) (int, error) {
	rpu.defaults()
	return withHooks[int, RegisteredProviderMutation](ctx, rpu.sqlSave, rpu.mutation, rpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rpu *RegisteredProviderUpdate) SaveX(ctx context.Context) int {
	affected, err := rpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rpu *RegisteredProviderUpdate) Exec(ctx context.Context) error {
	_, err := rpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpu *RegisteredProviderUpdate) ExecX(ctx context.Context) {
	if err := rpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rpu *RegisteredProviderUpdate) defaults() {
	if _, ok := rpu.mutation.UpdatedAt(); !ok {
		v := registeredprovider.UpdateDefaultUpdatedAt()
		rpu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rpu *RegisteredProviderUpdate) check() error {
	if v, ok := rpu.mutation.ParticipantName(); ok {
		if err := registeredprovider.ParticipantNameValidator(v); err != nil {
			return &ValidationError{Name: "participant_name", err: fmt.Errorf(`ent: validator failed for field "RegisteredProvider.participant_name": %w`, err)}
		}
	}
	if v, ok := rpu.mutation.ContractID(); ok {
		if err := registeredprovider.ContractIDValidator(v); err != nil {
			return &ValidationError{Name: "contract_id", err: fmt.Errorf(`ent: validator failed for field "RegisteredProvider.contract_id": %w`, err)}
		}
	}
	if _, ok := rpu.mutation.ContractID(); rpu.mutation.ContractCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "RegisteredProvider.contract"`)
	}
	return nil
}

func (rpu *RegisteredProviderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(registeredprovider.Table, registeredprovider.Columns, sqlgraph.NewFieldSpec(registeredprovider.FieldID, field.TypeUUID))
	if ps := rpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rpu.mutation.URL(); ok {
		_spec.SetField(registeredprovider.FieldURL, field.TypeJSON, value)
	}
	if value, ok := rpu.mutation.ParticipantName(); ok {
		_spec.SetField(registeredprovider.FieldParticipantName, field.TypeString, value)
	}
	if value, ok := rpu.mutation.UpdatedAt(); ok {
		_spec.SetField(registeredprovider.FieldUpdatedAt, field.TypeTime, value)
	}
	if rpu.mutation.ContractCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   registeredprovider.ContractTable,
			Columns: []string{registeredprovider.ContractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registeredcontract.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpu.mutation.ContractIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   registeredprovider.ContractTable,
			Columns: []string{registeredprovider.ContractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registeredcontract.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{registeredprovider.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rpu.mutation.done = true
	return n, nil
}

// RegisteredProviderUpdateOne is the builder for updating a single RegisteredProvider entity.
type RegisteredProviderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RegisteredProviderMutation
}

// SetURL sets the "url" field.
func (rpuo *RegisteredProviderUpdateOne) SetURL(u *url.URL) *RegisteredProviderUpdateOne {
	rpuo.mutation.SetURL(u)
	return rpuo
}

// SetParticipantName sets the "participant_name" field.
func (rpuo *RegisteredProviderUpdateOne) SetParticipantName(s string) *RegisteredProviderUpdateOne {
	rpuo.mutation.SetParticipantName(s)
	return rpuo
}

// SetContractID sets the "contract_id" field.
func (rpuo *RegisteredProviderUpdateOne) SetContractID(s string) *RegisteredProviderUpdateOne {
	rpuo.mutation.SetContractID(s)
	return rpuo
}

// SetUpdatedAt sets the "updated_at" field.
func (rpuo *RegisteredProviderUpdateOne) SetUpdatedAt(t time.Time) *RegisteredProviderUpdateOne {
	rpuo.mutation.SetUpdatedAt(t)
	return rpuo
}

// SetContract sets the "contract" edge to the RegisteredContract entity.
func (rpuo *RegisteredProviderUpdateOne) SetContract(r *RegisteredContract) *RegisteredProviderUpdateOne {
	return rpuo.SetContractID(r.ID)
}

// Mutation returns the RegisteredProviderMutation object of the builder.
func (rpuo *RegisteredProviderUpdateOne) Mutation() *RegisteredProviderMutation {
	return rpuo.mutation
}

// ClearContract clears the "contract" edge to the RegisteredContract entity.
func (rpuo *RegisteredProviderUpdateOne) ClearContract() *RegisteredProviderUpdateOne {
	rpuo.mutation.ClearContract()
	return rpuo
}

// Where appends a list predicates to the RegisteredProviderUpdate builder.
func (rpuo *RegisteredProviderUpdateOne) Where(ps ...predicate.RegisteredProvider) *RegisteredProviderUpdateOne {
	rpuo.mutation.Where(ps...)
	return rpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rpuo *RegisteredProviderUpdateOne) Select(field string, fields ...string) *RegisteredProviderUpdateOne {
	rpuo.fields = append([]string{field}, fields...)
	return rpuo
}

// Save executes the query and returns the updated RegisteredProvider entity.
func (rpuo *RegisteredProviderUpdateOne) Save(ctx context.Context) (*RegisteredProvider, error) {
	rpuo.defaults()
	return withHooks[*RegisteredProvider, RegisteredProviderMutation](ctx, rpuo.sqlSave, rpuo.mutation, rpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rpuo *RegisteredProviderUpdateOne) SaveX(ctx context.Context) *RegisteredProvider {
	node, err := rpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rpuo *RegisteredProviderUpdateOne) Exec(ctx context.Context) error {
	_, err := rpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpuo *RegisteredProviderUpdateOne) ExecX(ctx context.Context) {
	if err := rpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rpuo *RegisteredProviderUpdateOne) defaults() {
	if _, ok := rpuo.mutation.UpdatedAt(); !ok {
		v := registeredprovider.UpdateDefaultUpdatedAt()
		rpuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rpuo *RegisteredProviderUpdateOne) check() error {
	if v, ok := rpuo.mutation.ParticipantName(); ok {
		if err := registeredprovider.ParticipantNameValidator(v); err != nil {
			return &ValidationError{Name: "participant_name", err: fmt.Errorf(`ent: validator failed for field "RegisteredProvider.participant_name": %w`, err)}
		}
	}
	if v, ok := rpuo.mutation.ContractID(); ok {
		if err := registeredprovider.ContractIDValidator(v); err != nil {
			return &ValidationError{Name: "contract_id", err: fmt.Errorf(`ent: validator failed for field "RegisteredProvider.contract_id": %w`, err)}
		}
	}
	if _, ok := rpuo.mutation.ContractID(); rpuo.mutation.ContractCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "RegisteredProvider.contract"`)
	}
	return nil
}

func (rpuo *RegisteredProviderUpdateOne) sqlSave(ctx context.Context) (_node *RegisteredProvider, err error) {
	if err := rpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(registeredprovider.Table, registeredprovider.Columns, sqlgraph.NewFieldSpec(registeredprovider.FieldID, field.TypeUUID))
	id, ok := rpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RegisteredProvider.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, registeredprovider.FieldID)
		for _, f := range fields {
			if !registeredprovider.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != registeredprovider.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rpuo.mutation.URL(); ok {
		_spec.SetField(registeredprovider.FieldURL, field.TypeJSON, value)
	}
	if value, ok := rpuo.mutation.ParticipantName(); ok {
		_spec.SetField(registeredprovider.FieldParticipantName, field.TypeString, value)
	}
	if value, ok := rpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(registeredprovider.FieldUpdatedAt, field.TypeTime, value)
	}
	if rpuo.mutation.ContractCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   registeredprovider.ContractTable,
			Columns: []string{registeredprovider.ContractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registeredcontract.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpuo.mutation.ContractIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   registeredprovider.ContractTable,
			Columns: []string{registeredprovider.ContractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registeredcontract.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RegisteredProvider{config: rpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{registeredprovider.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rpuo.mutation.done = true
	return _node, nil
}

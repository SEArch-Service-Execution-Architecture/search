// Code generated by ent, DO NOT EDIT.

package registeredcontract

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/pmontepagano/search/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.RegisteredContract {
	return predicate.RegisteredContract(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.RegisteredContract {
	return predicate.RegisteredContract(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.RegisteredContract {
	return predicate.RegisteredContract(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.RegisteredContract {
	return predicate.RegisteredContract(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.RegisteredContract {
	return predicate.RegisteredContract(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.RegisteredContract {
	return predicate.RegisteredContract(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.RegisteredContract {
	return predicate.RegisteredContract(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.RegisteredContract {
	return predicate.RegisteredContract(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.RegisteredContract {
	return predicate.RegisteredContract(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.RegisteredContract {
	return predicate.RegisteredContract(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.RegisteredContract {
	return predicate.RegisteredContract(sql.FieldContainsFold(FieldID, id))
}

// Format applies equality check predicate on the "format" field. It's identical to FormatEQ.
func Format(v int) predicate.RegisteredContract {
	return predicate.RegisteredContract(sql.FieldEQ(FieldFormat, v))
}

// Contract applies equality check predicate on the "contract" field. It's identical to ContractEQ.
func Contract(v []byte) predicate.RegisteredContract {
	return predicate.RegisteredContract(sql.FieldEQ(FieldContract, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.RegisteredContract {
	return predicate.RegisteredContract(sql.FieldEQ(FieldCreatedAt, v))
}

// FormatEQ applies the EQ predicate on the "format" field.
func FormatEQ(v int) predicate.RegisteredContract {
	return predicate.RegisteredContract(sql.FieldEQ(FieldFormat, v))
}

// FormatNEQ applies the NEQ predicate on the "format" field.
func FormatNEQ(v int) predicate.RegisteredContract {
	return predicate.RegisteredContract(sql.FieldNEQ(FieldFormat, v))
}

// FormatIn applies the In predicate on the "format" field.
func FormatIn(vs ...int) predicate.RegisteredContract {
	return predicate.RegisteredContract(sql.FieldIn(FieldFormat, vs...))
}

// FormatNotIn applies the NotIn predicate on the "format" field.
func FormatNotIn(vs ...int) predicate.RegisteredContract {
	return predicate.RegisteredContract(sql.FieldNotIn(FieldFormat, vs...))
}

// FormatGT applies the GT predicate on the "format" field.
func FormatGT(v int) predicate.RegisteredContract {
	return predicate.RegisteredContract(sql.FieldGT(FieldFormat, v))
}

// FormatGTE applies the GTE predicate on the "format" field.
func FormatGTE(v int) predicate.RegisteredContract {
	return predicate.RegisteredContract(sql.FieldGTE(FieldFormat, v))
}

// FormatLT applies the LT predicate on the "format" field.
func FormatLT(v int) predicate.RegisteredContract {
	return predicate.RegisteredContract(sql.FieldLT(FieldFormat, v))
}

// FormatLTE applies the LTE predicate on the "format" field.
func FormatLTE(v int) predicate.RegisteredContract {
	return predicate.RegisteredContract(sql.FieldLTE(FieldFormat, v))
}

// ContractEQ applies the EQ predicate on the "contract" field.
func ContractEQ(v []byte) predicate.RegisteredContract {
	return predicate.RegisteredContract(sql.FieldEQ(FieldContract, v))
}

// ContractNEQ applies the NEQ predicate on the "contract" field.
func ContractNEQ(v []byte) predicate.RegisteredContract {
	return predicate.RegisteredContract(sql.FieldNEQ(FieldContract, v))
}

// ContractIn applies the In predicate on the "contract" field.
func ContractIn(vs ...[]byte) predicate.RegisteredContract {
	return predicate.RegisteredContract(sql.FieldIn(FieldContract, vs...))
}

// ContractNotIn applies the NotIn predicate on the "contract" field.
func ContractNotIn(vs ...[]byte) predicate.RegisteredContract {
	return predicate.RegisteredContract(sql.FieldNotIn(FieldContract, vs...))
}

// ContractGT applies the GT predicate on the "contract" field.
func ContractGT(v []byte) predicate.RegisteredContract {
	return predicate.RegisteredContract(sql.FieldGT(FieldContract, v))
}

// ContractGTE applies the GTE predicate on the "contract" field.
func ContractGTE(v []byte) predicate.RegisteredContract {
	return predicate.RegisteredContract(sql.FieldGTE(FieldContract, v))
}

// ContractLT applies the LT predicate on the "contract" field.
func ContractLT(v []byte) predicate.RegisteredContract {
	return predicate.RegisteredContract(sql.FieldLT(FieldContract, v))
}

// ContractLTE applies the LTE predicate on the "contract" field.
func ContractLTE(v []byte) predicate.RegisteredContract {
	return predicate.RegisteredContract(sql.FieldLTE(FieldContract, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.RegisteredContract {
	return predicate.RegisteredContract(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.RegisteredContract {
	return predicate.RegisteredContract(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.RegisteredContract {
	return predicate.RegisteredContract(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.RegisteredContract {
	return predicate.RegisteredContract(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.RegisteredContract {
	return predicate.RegisteredContract(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.RegisteredContract {
	return predicate.RegisteredContract(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.RegisteredContract {
	return predicate.RegisteredContract(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.RegisteredContract {
	return predicate.RegisteredContract(sql.FieldLTE(FieldCreatedAt, v))
}

// HasProviders applies the HasEdge predicate on the "providers" edge.
func HasProviders() predicate.RegisteredContract {
	return predicate.RegisteredContract(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ProvidersTable, ProvidersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProvidersWith applies the HasEdge predicate on the "providers" edge with a given conditions (other predicates).
func HasProvidersWith(preds ...predicate.RegisteredProvider) predicate.RegisteredContract {
	return predicate.RegisteredContract(func(s *sql.Selector) {
		step := newProvidersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCompatibilityResultsAsRequirement applies the HasEdge predicate on the "compatibility_results_as_requirement" edge.
func HasCompatibilityResultsAsRequirement() predicate.RegisteredContract {
	return predicate.RegisteredContract(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, CompatibilityResultsAsRequirementTable, CompatibilityResultsAsRequirementColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCompatibilityResultsAsRequirementWith applies the HasEdge predicate on the "compatibility_results_as_requirement" edge with a given conditions (other predicates).
func HasCompatibilityResultsAsRequirementWith(preds ...predicate.CompatibilityResult) predicate.RegisteredContract {
	return predicate.RegisteredContract(func(s *sql.Selector) {
		step := newCompatibilityResultsAsRequirementStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCompatibilityResultsAsProvider applies the HasEdge predicate on the "compatibility_results_as_provider" edge.
func HasCompatibilityResultsAsProvider() predicate.RegisteredContract {
	return predicate.RegisteredContract(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, CompatibilityResultsAsProviderTable, CompatibilityResultsAsProviderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCompatibilityResultsAsProviderWith applies the HasEdge predicate on the "compatibility_results_as_provider" edge with a given conditions (other predicates).
func HasCompatibilityResultsAsProviderWith(preds ...predicate.CompatibilityResult) predicate.RegisteredContract {
	return predicate.RegisteredContract(func(s *sql.Selector) {
		step := newCompatibilityResultsAsProviderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RegisteredContract) predicate.RegisteredContract {
	return predicate.RegisteredContract(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RegisteredContract) predicate.RegisteredContract {
	return predicate.RegisteredContract(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RegisteredContract) predicate.RegisteredContract {
	return predicate.RegisteredContract(sql.NotPredicates(p))
}

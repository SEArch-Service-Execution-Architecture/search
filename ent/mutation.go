// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"net/url"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/clpombo/search/ent/compatibilityresult"
	"github.com/clpombo/search/ent/predicate"
	"github.com/clpombo/search/ent/registeredcontract"
	"github.com/clpombo/search/ent/registeredprovider"
	"github.com/clpombo/search/ent/schema"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCompatibilityResult = "CompatibilityResult"
	TypeRegisteredContract  = "RegisteredContract"
	TypeRegisteredProvider  = "RegisteredProvider"
)

// CompatibilityResultMutation represents an operation that mutates the CompatibilityResult nodes in the graph.
type CompatibilityResultMutation struct {
	config
	op                          Op
	typ                         string
	id                          *int
	participant_name_req        *string
	participant_name_prov       *string
	result                      *bool
	mapping                     *schema.ParticipantNameMapping
	created_at                  *time.Time
	updated_at                  *time.Time
	clearedFields               map[string]struct{}
	requirement_contract        *string
	clearedrequirement_contract bool
	provider_contract           *string
	clearedprovider_contract    bool
	done                        bool
	oldValue                    func(context.Context) (*CompatibilityResult, error)
	predicates                  []predicate.CompatibilityResult
}

var _ ent.Mutation = (*CompatibilityResultMutation)(nil)

// compatibilityresultOption allows management of the mutation configuration using functional options.
type compatibilityresultOption func(*CompatibilityResultMutation)

// newCompatibilityResultMutation creates new mutation for the CompatibilityResult entity.
func newCompatibilityResultMutation(c config, op Op, opts ...compatibilityresultOption) *CompatibilityResultMutation {
	m := &CompatibilityResultMutation{
		config:        c,
		op:            op,
		typ:           TypeCompatibilityResult,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCompatibilityResultID sets the ID field of the mutation.
func withCompatibilityResultID(id int) compatibilityresultOption {
	return func(m *CompatibilityResultMutation) {
		var (
			err   error
			once  sync.Once
			value *CompatibilityResult
		)
		m.oldValue = func(ctx context.Context) (*CompatibilityResult, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CompatibilityResult.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCompatibilityResult sets the old CompatibilityResult of the mutation.
func withCompatibilityResult(node *CompatibilityResult) compatibilityresultOption {
	return func(m *CompatibilityResultMutation) {
		m.oldValue = func(context.Context) (*CompatibilityResult, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CompatibilityResultMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CompatibilityResultMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CompatibilityResultMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CompatibilityResultMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CompatibilityResult.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetRequirementContractID sets the "requirement_contract_id" field.
func (m *CompatibilityResultMutation) SetRequirementContractID(s string) {
	m.requirement_contract = &s
}

// RequirementContractID returns the value of the "requirement_contract_id" field in the mutation.
func (m *CompatibilityResultMutation) RequirementContractID() (r string, exists bool) {
	v := m.requirement_contract
	if v == nil {
		return
	}
	return *v, true
}

// OldRequirementContractID returns the old "requirement_contract_id" field's value of the CompatibilityResult entity.
// If the CompatibilityResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CompatibilityResultMutation) OldRequirementContractID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRequirementContractID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRequirementContractID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRequirementContractID: %w", err)
	}
	return oldValue.RequirementContractID, nil
}

// ResetRequirementContractID resets all changes to the "requirement_contract_id" field.
func (m *CompatibilityResultMutation) ResetRequirementContractID() {
	m.requirement_contract = nil
}

// SetProviderContractID sets the "provider_contract_id" field.
func (m *CompatibilityResultMutation) SetProviderContractID(s string) {
	m.provider_contract = &s
}

// ProviderContractID returns the value of the "provider_contract_id" field in the mutation.
func (m *CompatibilityResultMutation) ProviderContractID() (r string, exists bool) {
	v := m.provider_contract
	if v == nil {
		return
	}
	return *v, true
}

// OldProviderContractID returns the old "provider_contract_id" field's value of the CompatibilityResult entity.
// If the CompatibilityResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CompatibilityResultMutation) OldProviderContractID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProviderContractID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProviderContractID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProviderContractID: %w", err)
	}
	return oldValue.ProviderContractID, nil
}

// ResetProviderContractID resets all changes to the "provider_contract_id" field.
func (m *CompatibilityResultMutation) ResetProviderContractID() {
	m.provider_contract = nil
}

// SetParticipantNameReq sets the "participant_name_req" field.
func (m *CompatibilityResultMutation) SetParticipantNameReq(s string) {
	m.participant_name_req = &s
}

// ParticipantNameReq returns the value of the "participant_name_req" field in the mutation.
func (m *CompatibilityResultMutation) ParticipantNameReq() (r string, exists bool) {
	v := m.participant_name_req
	if v == nil {
		return
	}
	return *v, true
}

// OldParticipantNameReq returns the old "participant_name_req" field's value of the CompatibilityResult entity.
// If the CompatibilityResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CompatibilityResultMutation) OldParticipantNameReq(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParticipantNameReq is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParticipantNameReq requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParticipantNameReq: %w", err)
	}
	return oldValue.ParticipantNameReq, nil
}

// ResetParticipantNameReq resets all changes to the "participant_name_req" field.
func (m *CompatibilityResultMutation) ResetParticipantNameReq() {
	m.participant_name_req = nil
}

// SetParticipantNameProv sets the "participant_name_prov" field.
func (m *CompatibilityResultMutation) SetParticipantNameProv(s string) {
	m.participant_name_prov = &s
}

// ParticipantNameProv returns the value of the "participant_name_prov" field in the mutation.
func (m *CompatibilityResultMutation) ParticipantNameProv() (r string, exists bool) {
	v := m.participant_name_prov
	if v == nil {
		return
	}
	return *v, true
}

// OldParticipantNameProv returns the old "participant_name_prov" field's value of the CompatibilityResult entity.
// If the CompatibilityResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CompatibilityResultMutation) OldParticipantNameProv(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParticipantNameProv is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParticipantNameProv requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParticipantNameProv: %w", err)
	}
	return oldValue.ParticipantNameProv, nil
}

// ResetParticipantNameProv resets all changes to the "participant_name_prov" field.
func (m *CompatibilityResultMutation) ResetParticipantNameProv() {
	m.participant_name_prov = nil
}

// SetResult sets the "result" field.
func (m *CompatibilityResultMutation) SetResult(b bool) {
	m.result = &b
}

// Result returns the value of the "result" field in the mutation.
func (m *CompatibilityResultMutation) Result() (r bool, exists bool) {
	v := m.result
	if v == nil {
		return
	}
	return *v, true
}

// OldResult returns the old "result" field's value of the CompatibilityResult entity.
// If the CompatibilityResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CompatibilityResultMutation) OldResult(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResult is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResult requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResult: %w", err)
	}
	return oldValue.Result, nil
}

// ResetResult resets all changes to the "result" field.
func (m *CompatibilityResultMutation) ResetResult() {
	m.result = nil
}

// SetMapping sets the "mapping" field.
func (m *CompatibilityResultMutation) SetMapping(snm schema.ParticipantNameMapping) {
	m.mapping = &snm
}

// Mapping returns the value of the "mapping" field in the mutation.
func (m *CompatibilityResultMutation) Mapping() (r schema.ParticipantNameMapping, exists bool) {
	v := m.mapping
	if v == nil {
		return
	}
	return *v, true
}

// OldMapping returns the old "mapping" field's value of the CompatibilityResult entity.
// If the CompatibilityResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CompatibilityResultMutation) OldMapping(ctx context.Context) (v schema.ParticipantNameMapping, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMapping is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMapping requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMapping: %w", err)
	}
	return oldValue.Mapping, nil
}

// ClearMapping clears the value of the "mapping" field.
func (m *CompatibilityResultMutation) ClearMapping() {
	m.mapping = nil
	m.clearedFields[compatibilityresult.FieldMapping] = struct{}{}
}

// MappingCleared returns if the "mapping" field was cleared in this mutation.
func (m *CompatibilityResultMutation) MappingCleared() bool {
	_, ok := m.clearedFields[compatibilityresult.FieldMapping]
	return ok
}

// ResetMapping resets all changes to the "mapping" field.
func (m *CompatibilityResultMutation) ResetMapping() {
	m.mapping = nil
	delete(m.clearedFields, compatibilityresult.FieldMapping)
}

// SetCreatedAt sets the "created_at" field.
func (m *CompatibilityResultMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CompatibilityResultMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the CompatibilityResult entity.
// If the CompatibilityResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CompatibilityResultMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CompatibilityResultMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CompatibilityResultMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CompatibilityResultMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the CompatibilityResult entity.
// If the CompatibilityResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CompatibilityResultMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CompatibilityResultMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// ClearRequirementContract clears the "requirement_contract" edge to the RegisteredContract entity.
func (m *CompatibilityResultMutation) ClearRequirementContract() {
	m.clearedrequirement_contract = true
}

// RequirementContractCleared reports if the "requirement_contract" edge to the RegisteredContract entity was cleared.
func (m *CompatibilityResultMutation) RequirementContractCleared() bool {
	return m.clearedrequirement_contract
}

// RequirementContractIDs returns the "requirement_contract" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RequirementContractID instead. It exists only for internal usage by the builders.
func (m *CompatibilityResultMutation) RequirementContractIDs() (ids []string) {
	if id := m.requirement_contract; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRequirementContract resets all changes to the "requirement_contract" edge.
func (m *CompatibilityResultMutation) ResetRequirementContract() {
	m.requirement_contract = nil
	m.clearedrequirement_contract = false
}

// ClearProviderContract clears the "provider_contract" edge to the RegisteredContract entity.
func (m *CompatibilityResultMutation) ClearProviderContract() {
	m.clearedprovider_contract = true
}

// ProviderContractCleared reports if the "provider_contract" edge to the RegisteredContract entity was cleared.
func (m *CompatibilityResultMutation) ProviderContractCleared() bool {
	return m.clearedprovider_contract
}

// ProviderContractIDs returns the "provider_contract" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProviderContractID instead. It exists only for internal usage by the builders.
func (m *CompatibilityResultMutation) ProviderContractIDs() (ids []string) {
	if id := m.provider_contract; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProviderContract resets all changes to the "provider_contract" edge.
func (m *CompatibilityResultMutation) ResetProviderContract() {
	m.provider_contract = nil
	m.clearedprovider_contract = false
}

// Where appends a list predicates to the CompatibilityResultMutation builder.
func (m *CompatibilityResultMutation) Where(ps ...predicate.CompatibilityResult) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CompatibilityResultMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CompatibilityResultMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CompatibilityResult, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CompatibilityResultMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CompatibilityResultMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CompatibilityResult).
func (m *CompatibilityResultMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CompatibilityResultMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.requirement_contract != nil {
		fields = append(fields, compatibilityresult.FieldRequirementContractID)
	}
	if m.provider_contract != nil {
		fields = append(fields, compatibilityresult.FieldProviderContractID)
	}
	if m.participant_name_req != nil {
		fields = append(fields, compatibilityresult.FieldParticipantNameReq)
	}
	if m.participant_name_prov != nil {
		fields = append(fields, compatibilityresult.FieldParticipantNameProv)
	}
	if m.result != nil {
		fields = append(fields, compatibilityresult.FieldResult)
	}
	if m.mapping != nil {
		fields = append(fields, compatibilityresult.FieldMapping)
	}
	if m.created_at != nil {
		fields = append(fields, compatibilityresult.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, compatibilityresult.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CompatibilityResultMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case compatibilityresult.FieldRequirementContractID:
		return m.RequirementContractID()
	case compatibilityresult.FieldProviderContractID:
		return m.ProviderContractID()
	case compatibilityresult.FieldParticipantNameReq:
		return m.ParticipantNameReq()
	case compatibilityresult.FieldParticipantNameProv:
		return m.ParticipantNameProv()
	case compatibilityresult.FieldResult:
		return m.Result()
	case compatibilityresult.FieldMapping:
		return m.Mapping()
	case compatibilityresult.FieldCreatedAt:
		return m.CreatedAt()
	case compatibilityresult.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CompatibilityResultMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case compatibilityresult.FieldRequirementContractID:
		return m.OldRequirementContractID(ctx)
	case compatibilityresult.FieldProviderContractID:
		return m.OldProviderContractID(ctx)
	case compatibilityresult.FieldParticipantNameReq:
		return m.OldParticipantNameReq(ctx)
	case compatibilityresult.FieldParticipantNameProv:
		return m.OldParticipantNameProv(ctx)
	case compatibilityresult.FieldResult:
		return m.OldResult(ctx)
	case compatibilityresult.FieldMapping:
		return m.OldMapping(ctx)
	case compatibilityresult.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case compatibilityresult.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown CompatibilityResult field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CompatibilityResultMutation) SetField(name string, value ent.Value) error {
	switch name {
	case compatibilityresult.FieldRequirementContractID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRequirementContractID(v)
		return nil
	case compatibilityresult.FieldProviderContractID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProviderContractID(v)
		return nil
	case compatibilityresult.FieldParticipantNameReq:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParticipantNameReq(v)
		return nil
	case compatibilityresult.FieldParticipantNameProv:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParticipantNameProv(v)
		return nil
	case compatibilityresult.FieldResult:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResult(v)
		return nil
	case compatibilityresult.FieldMapping:
		v, ok := value.(schema.ParticipantNameMapping)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMapping(v)
		return nil
	case compatibilityresult.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case compatibilityresult.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown CompatibilityResult field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CompatibilityResultMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CompatibilityResultMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CompatibilityResultMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown CompatibilityResult numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CompatibilityResultMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(compatibilityresult.FieldMapping) {
		fields = append(fields, compatibilityresult.FieldMapping)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CompatibilityResultMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CompatibilityResultMutation) ClearField(name string) error {
	switch name {
	case compatibilityresult.FieldMapping:
		m.ClearMapping()
		return nil
	}
	return fmt.Errorf("unknown CompatibilityResult nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CompatibilityResultMutation) ResetField(name string) error {
	switch name {
	case compatibilityresult.FieldRequirementContractID:
		m.ResetRequirementContractID()
		return nil
	case compatibilityresult.FieldProviderContractID:
		m.ResetProviderContractID()
		return nil
	case compatibilityresult.FieldParticipantNameReq:
		m.ResetParticipantNameReq()
		return nil
	case compatibilityresult.FieldParticipantNameProv:
		m.ResetParticipantNameProv()
		return nil
	case compatibilityresult.FieldResult:
		m.ResetResult()
		return nil
	case compatibilityresult.FieldMapping:
		m.ResetMapping()
		return nil
	case compatibilityresult.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case compatibilityresult.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown CompatibilityResult field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CompatibilityResultMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.requirement_contract != nil {
		edges = append(edges, compatibilityresult.EdgeRequirementContract)
	}
	if m.provider_contract != nil {
		edges = append(edges, compatibilityresult.EdgeProviderContract)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CompatibilityResultMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case compatibilityresult.EdgeRequirementContract:
		if id := m.requirement_contract; id != nil {
			return []ent.Value{*id}
		}
	case compatibilityresult.EdgeProviderContract:
		if id := m.provider_contract; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CompatibilityResultMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CompatibilityResultMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CompatibilityResultMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedrequirement_contract {
		edges = append(edges, compatibilityresult.EdgeRequirementContract)
	}
	if m.clearedprovider_contract {
		edges = append(edges, compatibilityresult.EdgeProviderContract)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CompatibilityResultMutation) EdgeCleared(name string) bool {
	switch name {
	case compatibilityresult.EdgeRequirementContract:
		return m.clearedrequirement_contract
	case compatibilityresult.EdgeProviderContract:
		return m.clearedprovider_contract
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CompatibilityResultMutation) ClearEdge(name string) error {
	switch name {
	case compatibilityresult.EdgeRequirementContract:
		m.ClearRequirementContract()
		return nil
	case compatibilityresult.EdgeProviderContract:
		m.ClearProviderContract()
		return nil
	}
	return fmt.Errorf("unknown CompatibilityResult unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CompatibilityResultMutation) ResetEdge(name string) error {
	switch name {
	case compatibilityresult.EdgeRequirementContract:
		m.ResetRequirementContract()
		return nil
	case compatibilityresult.EdgeProviderContract:
		m.ResetProviderContract()
		return nil
	}
	return fmt.Errorf("unknown CompatibilityResult edge %s", name)
}

// RegisteredContractMutation represents an operation that mutates the RegisteredContract nodes in the graph.
type RegisteredContractMutation struct {
	config
	op                                          Op
	typ                                         string
	id                                          *string
	format                                      *int
	addformat                                   *int
	contract                                    *[]byte
	created_at                                  *time.Time
	clearedFields                               map[string]struct{}
	providers                                   map[uuid.UUID]struct{}
	removedproviders                            map[uuid.UUID]struct{}
	clearedproviders                            bool
	compatibility_results_as_requirement        map[int]struct{}
	removedcompatibility_results_as_requirement map[int]struct{}
	clearedcompatibility_results_as_requirement bool
	compatibility_results_as_provider           map[int]struct{}
	removedcompatibility_results_as_provider    map[int]struct{}
	clearedcompatibility_results_as_provider    bool
	done                                        bool
	oldValue                                    func(context.Context) (*RegisteredContract, error)
	predicates                                  []predicate.RegisteredContract
}

var _ ent.Mutation = (*RegisteredContractMutation)(nil)

// registeredcontractOption allows management of the mutation configuration using functional options.
type registeredcontractOption func(*RegisteredContractMutation)

// newRegisteredContractMutation creates new mutation for the RegisteredContract entity.
func newRegisteredContractMutation(c config, op Op, opts ...registeredcontractOption) *RegisteredContractMutation {
	m := &RegisteredContractMutation{
		config:        c,
		op:            op,
		typ:           TypeRegisteredContract,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRegisteredContractID sets the ID field of the mutation.
func withRegisteredContractID(id string) registeredcontractOption {
	return func(m *RegisteredContractMutation) {
		var (
			err   error
			once  sync.Once
			value *RegisteredContract
		)
		m.oldValue = func(ctx context.Context) (*RegisteredContract, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RegisteredContract.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRegisteredContract sets the old RegisteredContract of the mutation.
func withRegisteredContract(node *RegisteredContract) registeredcontractOption {
	return func(m *RegisteredContractMutation) {
		m.oldValue = func(context.Context) (*RegisteredContract, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RegisteredContractMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RegisteredContractMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of RegisteredContract entities.
func (m *RegisteredContractMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RegisteredContractMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RegisteredContractMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().RegisteredContract.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFormat sets the "format" field.
func (m *RegisteredContractMutation) SetFormat(i int) {
	m.format = &i
	m.addformat = nil
}

// Format returns the value of the "format" field in the mutation.
func (m *RegisteredContractMutation) Format() (r int, exists bool) {
	v := m.format
	if v == nil {
		return
	}
	return *v, true
}

// OldFormat returns the old "format" field's value of the RegisteredContract entity.
// If the RegisteredContract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RegisteredContractMutation) OldFormat(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFormat is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFormat requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFormat: %w", err)
	}
	return oldValue.Format, nil
}

// AddFormat adds i to the "format" field.
func (m *RegisteredContractMutation) AddFormat(i int) {
	if m.addformat != nil {
		*m.addformat += i
	} else {
		m.addformat = &i
	}
}

// AddedFormat returns the value that was added to the "format" field in this mutation.
func (m *RegisteredContractMutation) AddedFormat() (r int, exists bool) {
	v := m.addformat
	if v == nil {
		return
	}
	return *v, true
}

// ResetFormat resets all changes to the "format" field.
func (m *RegisteredContractMutation) ResetFormat() {
	m.format = nil
	m.addformat = nil
}

// SetContract sets the "contract" field.
func (m *RegisteredContractMutation) SetContract(b []byte) {
	m.contract = &b
}

// Contract returns the value of the "contract" field in the mutation.
func (m *RegisteredContractMutation) Contract() (r []byte, exists bool) {
	v := m.contract
	if v == nil {
		return
	}
	return *v, true
}

// OldContract returns the old "contract" field's value of the RegisteredContract entity.
// If the RegisteredContract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RegisteredContractMutation) OldContract(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContract is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContract requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContract: %w", err)
	}
	return oldValue.Contract, nil
}

// ResetContract resets all changes to the "contract" field.
func (m *RegisteredContractMutation) ResetContract() {
	m.contract = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *RegisteredContractMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *RegisteredContractMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the RegisteredContract entity.
// If the RegisteredContract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RegisteredContractMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *RegisteredContractMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddProviderIDs adds the "providers" edge to the RegisteredProvider entity by ids.
func (m *RegisteredContractMutation) AddProviderIDs(ids ...uuid.UUID) {
	if m.providers == nil {
		m.providers = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.providers[ids[i]] = struct{}{}
	}
}

// ClearProviders clears the "providers" edge to the RegisteredProvider entity.
func (m *RegisteredContractMutation) ClearProviders() {
	m.clearedproviders = true
}

// ProvidersCleared reports if the "providers" edge to the RegisteredProvider entity was cleared.
func (m *RegisteredContractMutation) ProvidersCleared() bool {
	return m.clearedproviders
}

// RemoveProviderIDs removes the "providers" edge to the RegisteredProvider entity by IDs.
func (m *RegisteredContractMutation) RemoveProviderIDs(ids ...uuid.UUID) {
	if m.removedproviders == nil {
		m.removedproviders = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.providers, ids[i])
		m.removedproviders[ids[i]] = struct{}{}
	}
}

// RemovedProviders returns the removed IDs of the "providers" edge to the RegisteredProvider entity.
func (m *RegisteredContractMutation) RemovedProvidersIDs() (ids []uuid.UUID) {
	for id := range m.removedproviders {
		ids = append(ids, id)
	}
	return
}

// ProvidersIDs returns the "providers" edge IDs in the mutation.
func (m *RegisteredContractMutation) ProvidersIDs() (ids []uuid.UUID) {
	for id := range m.providers {
		ids = append(ids, id)
	}
	return
}

// ResetProviders resets all changes to the "providers" edge.
func (m *RegisteredContractMutation) ResetProviders() {
	m.providers = nil
	m.clearedproviders = false
	m.removedproviders = nil
}

// AddCompatibilityResultsAsRequirementIDs adds the "compatibility_results_as_requirement" edge to the CompatibilityResult entity by ids.
func (m *RegisteredContractMutation) AddCompatibilityResultsAsRequirementIDs(ids ...int) {
	if m.compatibility_results_as_requirement == nil {
		m.compatibility_results_as_requirement = make(map[int]struct{})
	}
	for i := range ids {
		m.compatibility_results_as_requirement[ids[i]] = struct{}{}
	}
}

// ClearCompatibilityResultsAsRequirement clears the "compatibility_results_as_requirement" edge to the CompatibilityResult entity.
func (m *RegisteredContractMutation) ClearCompatibilityResultsAsRequirement() {
	m.clearedcompatibility_results_as_requirement = true
}

// CompatibilityResultsAsRequirementCleared reports if the "compatibility_results_as_requirement" edge to the CompatibilityResult entity was cleared.
func (m *RegisteredContractMutation) CompatibilityResultsAsRequirementCleared() bool {
	return m.clearedcompatibility_results_as_requirement
}

// RemoveCompatibilityResultsAsRequirementIDs removes the "compatibility_results_as_requirement" edge to the CompatibilityResult entity by IDs.
func (m *RegisteredContractMutation) RemoveCompatibilityResultsAsRequirementIDs(ids ...int) {
	if m.removedcompatibility_results_as_requirement == nil {
		m.removedcompatibility_results_as_requirement = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.compatibility_results_as_requirement, ids[i])
		m.removedcompatibility_results_as_requirement[ids[i]] = struct{}{}
	}
}

// RemovedCompatibilityResultsAsRequirement returns the removed IDs of the "compatibility_results_as_requirement" edge to the CompatibilityResult entity.
func (m *RegisteredContractMutation) RemovedCompatibilityResultsAsRequirementIDs() (ids []int) {
	for id := range m.removedcompatibility_results_as_requirement {
		ids = append(ids, id)
	}
	return
}

// CompatibilityResultsAsRequirementIDs returns the "compatibility_results_as_requirement" edge IDs in the mutation.
func (m *RegisteredContractMutation) CompatibilityResultsAsRequirementIDs() (ids []int) {
	for id := range m.compatibility_results_as_requirement {
		ids = append(ids, id)
	}
	return
}

// ResetCompatibilityResultsAsRequirement resets all changes to the "compatibility_results_as_requirement" edge.
func (m *RegisteredContractMutation) ResetCompatibilityResultsAsRequirement() {
	m.compatibility_results_as_requirement = nil
	m.clearedcompatibility_results_as_requirement = false
	m.removedcompatibility_results_as_requirement = nil
}

// AddCompatibilityResultsAsProviderIDs adds the "compatibility_results_as_provider" edge to the CompatibilityResult entity by ids.
func (m *RegisteredContractMutation) AddCompatibilityResultsAsProviderIDs(ids ...int) {
	if m.compatibility_results_as_provider == nil {
		m.compatibility_results_as_provider = make(map[int]struct{})
	}
	for i := range ids {
		m.compatibility_results_as_provider[ids[i]] = struct{}{}
	}
}

// ClearCompatibilityResultsAsProvider clears the "compatibility_results_as_provider" edge to the CompatibilityResult entity.
func (m *RegisteredContractMutation) ClearCompatibilityResultsAsProvider() {
	m.clearedcompatibility_results_as_provider = true
}

// CompatibilityResultsAsProviderCleared reports if the "compatibility_results_as_provider" edge to the CompatibilityResult entity was cleared.
func (m *RegisteredContractMutation) CompatibilityResultsAsProviderCleared() bool {
	return m.clearedcompatibility_results_as_provider
}

// RemoveCompatibilityResultsAsProviderIDs removes the "compatibility_results_as_provider" edge to the CompatibilityResult entity by IDs.
func (m *RegisteredContractMutation) RemoveCompatibilityResultsAsProviderIDs(ids ...int) {
	if m.removedcompatibility_results_as_provider == nil {
		m.removedcompatibility_results_as_provider = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.compatibility_results_as_provider, ids[i])
		m.removedcompatibility_results_as_provider[ids[i]] = struct{}{}
	}
}

// RemovedCompatibilityResultsAsProvider returns the removed IDs of the "compatibility_results_as_provider" edge to the CompatibilityResult entity.
func (m *RegisteredContractMutation) RemovedCompatibilityResultsAsProviderIDs() (ids []int) {
	for id := range m.removedcompatibility_results_as_provider {
		ids = append(ids, id)
	}
	return
}

// CompatibilityResultsAsProviderIDs returns the "compatibility_results_as_provider" edge IDs in the mutation.
func (m *RegisteredContractMutation) CompatibilityResultsAsProviderIDs() (ids []int) {
	for id := range m.compatibility_results_as_provider {
		ids = append(ids, id)
	}
	return
}

// ResetCompatibilityResultsAsProvider resets all changes to the "compatibility_results_as_provider" edge.
func (m *RegisteredContractMutation) ResetCompatibilityResultsAsProvider() {
	m.compatibility_results_as_provider = nil
	m.clearedcompatibility_results_as_provider = false
	m.removedcompatibility_results_as_provider = nil
}

// Where appends a list predicates to the RegisteredContractMutation builder.
func (m *RegisteredContractMutation) Where(ps ...predicate.RegisteredContract) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RegisteredContractMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RegisteredContractMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.RegisteredContract, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RegisteredContractMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RegisteredContractMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (RegisteredContract).
func (m *RegisteredContractMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RegisteredContractMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.format != nil {
		fields = append(fields, registeredcontract.FieldFormat)
	}
	if m.contract != nil {
		fields = append(fields, registeredcontract.FieldContract)
	}
	if m.created_at != nil {
		fields = append(fields, registeredcontract.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RegisteredContractMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case registeredcontract.FieldFormat:
		return m.Format()
	case registeredcontract.FieldContract:
		return m.Contract()
	case registeredcontract.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RegisteredContractMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case registeredcontract.FieldFormat:
		return m.OldFormat(ctx)
	case registeredcontract.FieldContract:
		return m.OldContract(ctx)
	case registeredcontract.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown RegisteredContract field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RegisteredContractMutation) SetField(name string, value ent.Value) error {
	switch name {
	case registeredcontract.FieldFormat:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFormat(v)
		return nil
	case registeredcontract.FieldContract:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContract(v)
		return nil
	case registeredcontract.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown RegisteredContract field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RegisteredContractMutation) AddedFields() []string {
	var fields []string
	if m.addformat != nil {
		fields = append(fields, registeredcontract.FieldFormat)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RegisteredContractMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case registeredcontract.FieldFormat:
		return m.AddedFormat()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RegisteredContractMutation) AddField(name string, value ent.Value) error {
	switch name {
	case registeredcontract.FieldFormat:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFormat(v)
		return nil
	}
	return fmt.Errorf("unknown RegisteredContract numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RegisteredContractMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RegisteredContractMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RegisteredContractMutation) ClearField(name string) error {
	return fmt.Errorf("unknown RegisteredContract nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RegisteredContractMutation) ResetField(name string) error {
	switch name {
	case registeredcontract.FieldFormat:
		m.ResetFormat()
		return nil
	case registeredcontract.FieldContract:
		m.ResetContract()
		return nil
	case registeredcontract.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown RegisteredContract field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RegisteredContractMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.providers != nil {
		edges = append(edges, registeredcontract.EdgeProviders)
	}
	if m.compatibility_results_as_requirement != nil {
		edges = append(edges, registeredcontract.EdgeCompatibilityResultsAsRequirement)
	}
	if m.compatibility_results_as_provider != nil {
		edges = append(edges, registeredcontract.EdgeCompatibilityResultsAsProvider)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RegisteredContractMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case registeredcontract.EdgeProviders:
		ids := make([]ent.Value, 0, len(m.providers))
		for id := range m.providers {
			ids = append(ids, id)
		}
		return ids
	case registeredcontract.EdgeCompatibilityResultsAsRequirement:
		ids := make([]ent.Value, 0, len(m.compatibility_results_as_requirement))
		for id := range m.compatibility_results_as_requirement {
			ids = append(ids, id)
		}
		return ids
	case registeredcontract.EdgeCompatibilityResultsAsProvider:
		ids := make([]ent.Value, 0, len(m.compatibility_results_as_provider))
		for id := range m.compatibility_results_as_provider {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RegisteredContractMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedproviders != nil {
		edges = append(edges, registeredcontract.EdgeProviders)
	}
	if m.removedcompatibility_results_as_requirement != nil {
		edges = append(edges, registeredcontract.EdgeCompatibilityResultsAsRequirement)
	}
	if m.removedcompatibility_results_as_provider != nil {
		edges = append(edges, registeredcontract.EdgeCompatibilityResultsAsProvider)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RegisteredContractMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case registeredcontract.EdgeProviders:
		ids := make([]ent.Value, 0, len(m.removedproviders))
		for id := range m.removedproviders {
			ids = append(ids, id)
		}
		return ids
	case registeredcontract.EdgeCompatibilityResultsAsRequirement:
		ids := make([]ent.Value, 0, len(m.removedcompatibility_results_as_requirement))
		for id := range m.removedcompatibility_results_as_requirement {
			ids = append(ids, id)
		}
		return ids
	case registeredcontract.EdgeCompatibilityResultsAsProvider:
		ids := make([]ent.Value, 0, len(m.removedcompatibility_results_as_provider))
		for id := range m.removedcompatibility_results_as_provider {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RegisteredContractMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedproviders {
		edges = append(edges, registeredcontract.EdgeProviders)
	}
	if m.clearedcompatibility_results_as_requirement {
		edges = append(edges, registeredcontract.EdgeCompatibilityResultsAsRequirement)
	}
	if m.clearedcompatibility_results_as_provider {
		edges = append(edges, registeredcontract.EdgeCompatibilityResultsAsProvider)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RegisteredContractMutation) EdgeCleared(name string) bool {
	switch name {
	case registeredcontract.EdgeProviders:
		return m.clearedproviders
	case registeredcontract.EdgeCompatibilityResultsAsRequirement:
		return m.clearedcompatibility_results_as_requirement
	case registeredcontract.EdgeCompatibilityResultsAsProvider:
		return m.clearedcompatibility_results_as_provider
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RegisteredContractMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown RegisteredContract unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RegisteredContractMutation) ResetEdge(name string) error {
	switch name {
	case registeredcontract.EdgeProviders:
		m.ResetProviders()
		return nil
	case registeredcontract.EdgeCompatibilityResultsAsRequirement:
		m.ResetCompatibilityResultsAsRequirement()
		return nil
	case registeredcontract.EdgeCompatibilityResultsAsProvider:
		m.ResetCompatibilityResultsAsProvider()
		return nil
	}
	return fmt.Errorf("unknown RegisteredContract edge %s", name)
}

// RegisteredProviderMutation represents an operation that mutates the RegisteredProvider nodes in the graph.
type RegisteredProviderMutation struct {
	config
	op               Op
	typ              string
	id               *uuid.UUID
	url              **url.URL
	participant_name *string
	created_at       *time.Time
	updated_at       *time.Time
	clearedFields    map[string]struct{}
	contract         *string
	clearedcontract  bool
	done             bool
	oldValue         func(context.Context) (*RegisteredProvider, error)
	predicates       []predicate.RegisteredProvider
}

var _ ent.Mutation = (*RegisteredProviderMutation)(nil)

// registeredproviderOption allows management of the mutation configuration using functional options.
type registeredproviderOption func(*RegisteredProviderMutation)

// newRegisteredProviderMutation creates new mutation for the RegisteredProvider entity.
func newRegisteredProviderMutation(c config, op Op, opts ...registeredproviderOption) *RegisteredProviderMutation {
	m := &RegisteredProviderMutation{
		config:        c,
		op:            op,
		typ:           TypeRegisteredProvider,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRegisteredProviderID sets the ID field of the mutation.
func withRegisteredProviderID(id uuid.UUID) registeredproviderOption {
	return func(m *RegisteredProviderMutation) {
		var (
			err   error
			once  sync.Once
			value *RegisteredProvider
		)
		m.oldValue = func(ctx context.Context) (*RegisteredProvider, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RegisteredProvider.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRegisteredProvider sets the old RegisteredProvider of the mutation.
func withRegisteredProvider(node *RegisteredProvider) registeredproviderOption {
	return func(m *RegisteredProviderMutation) {
		m.oldValue = func(context.Context) (*RegisteredProvider, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RegisteredProviderMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RegisteredProviderMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of RegisteredProvider entities.
func (m *RegisteredProviderMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RegisteredProviderMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RegisteredProviderMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().RegisteredProvider.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetURL sets the "url" field.
func (m *RegisteredProviderMutation) SetURL(u *url.URL) {
	m.url = &u
}

// URL returns the value of the "url" field in the mutation.
func (m *RegisteredProviderMutation) URL() (r *url.URL, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the RegisteredProvider entity.
// If the RegisteredProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RegisteredProviderMutation) OldURL(ctx context.Context) (v *url.URL, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ResetURL resets all changes to the "url" field.
func (m *RegisteredProviderMutation) ResetURL() {
	m.url = nil
}

// SetParticipantName sets the "participant_name" field.
func (m *RegisteredProviderMutation) SetParticipantName(s string) {
	m.participant_name = &s
}

// ParticipantName returns the value of the "participant_name" field in the mutation.
func (m *RegisteredProviderMutation) ParticipantName() (r string, exists bool) {
	v := m.participant_name
	if v == nil {
		return
	}
	return *v, true
}

// OldParticipantName returns the old "participant_name" field's value of the RegisteredProvider entity.
// If the RegisteredProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RegisteredProviderMutation) OldParticipantName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParticipantName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParticipantName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParticipantName: %w", err)
	}
	return oldValue.ParticipantName, nil
}

// ResetParticipantName resets all changes to the "participant_name" field.
func (m *RegisteredProviderMutation) ResetParticipantName() {
	m.participant_name = nil
}

// SetContractID sets the "contract_id" field.
func (m *RegisteredProviderMutation) SetContractID(s string) {
	m.contract = &s
}

// ContractID returns the value of the "contract_id" field in the mutation.
func (m *RegisteredProviderMutation) ContractID() (r string, exists bool) {
	v := m.contract
	if v == nil {
		return
	}
	return *v, true
}

// OldContractID returns the old "contract_id" field's value of the RegisteredProvider entity.
// If the RegisteredProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RegisteredProviderMutation) OldContractID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContractID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContractID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContractID: %w", err)
	}
	return oldValue.ContractID, nil
}

// ResetContractID resets all changes to the "contract_id" field.
func (m *RegisteredProviderMutation) ResetContractID() {
	m.contract = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *RegisteredProviderMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *RegisteredProviderMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the RegisteredProvider entity.
// If the RegisteredProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RegisteredProviderMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *RegisteredProviderMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *RegisteredProviderMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *RegisteredProviderMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the RegisteredProvider entity.
// If the RegisteredProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RegisteredProviderMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *RegisteredProviderMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// ClearContract clears the "contract" edge to the RegisteredContract entity.
func (m *RegisteredProviderMutation) ClearContract() {
	m.clearedcontract = true
}

// ContractCleared reports if the "contract" edge to the RegisteredContract entity was cleared.
func (m *RegisteredProviderMutation) ContractCleared() bool {
	return m.clearedcontract
}

// ContractIDs returns the "contract" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ContractID instead. It exists only for internal usage by the builders.
func (m *RegisteredProviderMutation) ContractIDs() (ids []string) {
	if id := m.contract; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetContract resets all changes to the "contract" edge.
func (m *RegisteredProviderMutation) ResetContract() {
	m.contract = nil
	m.clearedcontract = false
}

// Where appends a list predicates to the RegisteredProviderMutation builder.
func (m *RegisteredProviderMutation) Where(ps ...predicate.RegisteredProvider) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RegisteredProviderMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RegisteredProviderMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.RegisteredProvider, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RegisteredProviderMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RegisteredProviderMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (RegisteredProvider).
func (m *RegisteredProviderMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RegisteredProviderMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.url != nil {
		fields = append(fields, registeredprovider.FieldURL)
	}
	if m.participant_name != nil {
		fields = append(fields, registeredprovider.FieldParticipantName)
	}
	if m.contract != nil {
		fields = append(fields, registeredprovider.FieldContractID)
	}
	if m.created_at != nil {
		fields = append(fields, registeredprovider.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, registeredprovider.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RegisteredProviderMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case registeredprovider.FieldURL:
		return m.URL()
	case registeredprovider.FieldParticipantName:
		return m.ParticipantName()
	case registeredprovider.FieldContractID:
		return m.ContractID()
	case registeredprovider.FieldCreatedAt:
		return m.CreatedAt()
	case registeredprovider.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RegisteredProviderMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case registeredprovider.FieldURL:
		return m.OldURL(ctx)
	case registeredprovider.FieldParticipantName:
		return m.OldParticipantName(ctx)
	case registeredprovider.FieldContractID:
		return m.OldContractID(ctx)
	case registeredprovider.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case registeredprovider.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown RegisteredProvider field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RegisteredProviderMutation) SetField(name string, value ent.Value) error {
	switch name {
	case registeredprovider.FieldURL:
		v, ok := value.(*url.URL)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	case registeredprovider.FieldParticipantName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParticipantName(v)
		return nil
	case registeredprovider.FieldContractID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContractID(v)
		return nil
	case registeredprovider.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case registeredprovider.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown RegisteredProvider field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RegisteredProviderMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RegisteredProviderMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RegisteredProviderMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown RegisteredProvider numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RegisteredProviderMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RegisteredProviderMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RegisteredProviderMutation) ClearField(name string) error {
	return fmt.Errorf("unknown RegisteredProvider nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RegisteredProviderMutation) ResetField(name string) error {
	switch name {
	case registeredprovider.FieldURL:
		m.ResetURL()
		return nil
	case registeredprovider.FieldParticipantName:
		m.ResetParticipantName()
		return nil
	case registeredprovider.FieldContractID:
		m.ResetContractID()
		return nil
	case registeredprovider.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case registeredprovider.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown RegisteredProvider field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RegisteredProviderMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.contract != nil {
		edges = append(edges, registeredprovider.EdgeContract)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RegisteredProviderMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case registeredprovider.EdgeContract:
		if id := m.contract; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RegisteredProviderMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RegisteredProviderMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RegisteredProviderMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedcontract {
		edges = append(edges, registeredprovider.EdgeContract)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RegisteredProviderMutation) EdgeCleared(name string) bool {
	switch name {
	case registeredprovider.EdgeContract:
		return m.clearedcontract
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RegisteredProviderMutation) ClearEdge(name string) error {
	switch name {
	case registeredprovider.EdgeContract:
		m.ClearContract()
		return nil
	}
	return fmt.Errorf("unknown RegisteredProvider unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RegisteredProviderMutation) ResetEdge(name string) error {
	switch name {
	case registeredprovider.EdgeContract:
		m.ResetContract()
		return nil
	}
	return fmt.Errorf("unknown RegisteredProvider edge %s", name)
}

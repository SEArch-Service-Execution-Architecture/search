// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/pmontepagano/search/ent/registeredcontract"
)

// RegisteredContract is the model entity for the RegisteredContract schema.
type RegisteredContract struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Format holds the value of the "format" field.
	Format int `json:"format,omitempty"`
	// Contract holds the value of the "contract" field.
	Contract []byte `json:"contract,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RegisteredContractQuery when eager-loading is set.
	Edges        RegisteredContractEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RegisteredContractEdges holds the relations/edges for other nodes in the graph.
type RegisteredContractEdges struct {
	// Providers holds the value of the providers edge.
	Providers []*RegisteredProvider `json:"providers,omitempty"`
	// CompatibilityResultsAsRequirement holds the value of the compatibility_results_as_requirement edge.
	CompatibilityResultsAsRequirement []*CompatibilityResult `json:"compatibility_results_as_requirement,omitempty"`
	// CompatibilityResultsAsProvider holds the value of the compatibility_results_as_provider edge.
	CompatibilityResultsAsProvider []*CompatibilityResult `json:"compatibility_results_as_provider,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ProvidersOrErr returns the Providers value or an error if the edge
// was not loaded in eager-loading.
func (e RegisteredContractEdges) ProvidersOrErr() ([]*RegisteredProvider, error) {
	if e.loadedTypes[0] {
		return e.Providers, nil
	}
	return nil, &NotLoadedError{edge: "providers"}
}

// CompatibilityResultsAsRequirementOrErr returns the CompatibilityResultsAsRequirement value or an error if the edge
// was not loaded in eager-loading.
func (e RegisteredContractEdges) CompatibilityResultsAsRequirementOrErr() ([]*CompatibilityResult, error) {
	if e.loadedTypes[1] {
		return e.CompatibilityResultsAsRequirement, nil
	}
	return nil, &NotLoadedError{edge: "compatibility_results_as_requirement"}
}

// CompatibilityResultsAsProviderOrErr returns the CompatibilityResultsAsProvider value or an error if the edge
// was not loaded in eager-loading.
func (e RegisteredContractEdges) CompatibilityResultsAsProviderOrErr() ([]*CompatibilityResult, error) {
	if e.loadedTypes[2] {
		return e.CompatibilityResultsAsProvider, nil
	}
	return nil, &NotLoadedError{edge: "compatibility_results_as_provider"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RegisteredContract) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case registeredcontract.FieldContract:
			values[i] = new([]byte)
		case registeredcontract.FieldFormat:
			values[i] = new(sql.NullInt64)
		case registeredcontract.FieldID:
			values[i] = new(sql.NullString)
		case registeredcontract.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RegisteredContract fields.
func (rc *RegisteredContract) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case registeredcontract.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				rc.ID = value.String
			}
		case registeredcontract.FieldFormat:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field format", values[i])
			} else if value.Valid {
				rc.Format = int(value.Int64)
			}
		case registeredcontract.FieldContract:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field contract", values[i])
			} else if value != nil {
				rc.Contract = *value
			}
		case registeredcontract.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				rc.CreatedAt = value.Time
			}
		default:
			rc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RegisteredContract.
// This includes values selected through modifiers, order, etc.
func (rc *RegisteredContract) Value(name string) (ent.Value, error) {
	return rc.selectValues.Get(name)
}

// QueryProviders queries the "providers" edge of the RegisteredContract entity.
func (rc *RegisteredContract) QueryProviders() *RegisteredProviderQuery {
	return NewRegisteredContractClient(rc.config).QueryProviders(rc)
}

// QueryCompatibilityResultsAsRequirement queries the "compatibility_results_as_requirement" edge of the RegisteredContract entity.
func (rc *RegisteredContract) QueryCompatibilityResultsAsRequirement() *CompatibilityResultQuery {
	return NewRegisteredContractClient(rc.config).QueryCompatibilityResultsAsRequirement(rc)
}

// QueryCompatibilityResultsAsProvider queries the "compatibility_results_as_provider" edge of the RegisteredContract entity.
func (rc *RegisteredContract) QueryCompatibilityResultsAsProvider() *CompatibilityResultQuery {
	return NewRegisteredContractClient(rc.config).QueryCompatibilityResultsAsProvider(rc)
}

// Update returns a builder for updating this RegisteredContract.
// Note that you need to call RegisteredContract.Unwrap() before calling this method if this RegisteredContract
// was returned from a transaction, and the transaction was committed or rolled back.
func (rc *RegisteredContract) Update() *RegisteredContractUpdateOne {
	return NewRegisteredContractClient(rc.config).UpdateOne(rc)
}

// Unwrap unwraps the RegisteredContract entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rc *RegisteredContract) Unwrap() *RegisteredContract {
	_tx, ok := rc.config.driver.(*txDriver)
	if !ok {
		panic("ent: RegisteredContract is not a transactional entity")
	}
	rc.config.driver = _tx.drv
	return rc
}

// String implements the fmt.Stringer.
func (rc *RegisteredContract) String() string {
	var builder strings.Builder
	builder.WriteString("RegisteredContract(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rc.ID))
	builder.WriteString("format=")
	builder.WriteString(fmt.Sprintf("%v", rc.Format))
	builder.WriteString(", ")
	builder.WriteString("contract=")
	builder.WriteString(fmt.Sprintf("%v", rc.Contract))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(rc.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// RegisteredContracts is a parsable slice of RegisteredContract.
type RegisteredContracts []*RegisteredContract

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"net/url"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/clpombo/search/ent/registeredcontract"
	"github.com/clpombo/search/ent/registeredprovider"
	"github.com/google/uuid"
)

// RegisteredProvider is the model entity for the RegisteredProvider schema.
type RegisteredProvider struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// URL holds the value of the "url" field.
	URL *url.URL `json:"url,omitempty"`
	// ParticipantName holds the value of the "participant_name" field.
	ParticipantName string `json:"participant_name,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RegisteredProviderQuery when eager-loading is set.
	Edges                         RegisteredProviderEdges `json:"edges"`
	registered_contract_providers *string
	selectValues                  sql.SelectValues
}

// RegisteredProviderEdges holds the relations/edges for other nodes in the graph.
type RegisteredProviderEdges struct {
	// Contract holds the value of the contract edge.
	Contract *RegisteredContract `json:"contract,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ContractOrErr returns the Contract value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RegisteredProviderEdges) ContractOrErr() (*RegisteredContract, error) {
	if e.loadedTypes[0] {
		if e.Contract == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: registeredcontract.Label}
		}
		return e.Contract, nil
	}
	return nil, &NotLoadedError{edge: "contract"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RegisteredProvider) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case registeredprovider.FieldURL:
			values[i] = new([]byte)
		case registeredprovider.FieldParticipantName:
			values[i] = new(sql.NullString)
		case registeredprovider.FieldCreatedAt, registeredprovider.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case registeredprovider.FieldID:
			values[i] = new(uuid.UUID)
		case registeredprovider.ForeignKeys[0]: // registered_contract_providers
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RegisteredProvider fields.
func (rp *RegisteredProvider) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case registeredprovider.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				rp.ID = *value
			}
		case registeredprovider.FieldURL:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &rp.URL); err != nil {
					return fmt.Errorf("unmarshal field url: %w", err)
				}
			}
		case registeredprovider.FieldParticipantName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field participant_name", values[i])
			} else if value.Valid {
				rp.ParticipantName = value.String
			}
		case registeredprovider.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				rp.CreatedAt = value.Time
			}
		case registeredprovider.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				rp.UpdatedAt = value.Time
			}
		case registeredprovider.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field registered_contract_providers", values[i])
			} else if value.Valid {
				rp.registered_contract_providers = new(string)
				*rp.registered_contract_providers = value.String
			}
		default:
			rp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RegisteredProvider.
// This includes values selected through modifiers, order, etc.
func (rp *RegisteredProvider) Value(name string) (ent.Value, error) {
	return rp.selectValues.Get(name)
}

// QueryContract queries the "contract" edge of the RegisteredProvider entity.
func (rp *RegisteredProvider) QueryContract() *RegisteredContractQuery {
	return NewRegisteredProviderClient(rp.config).QueryContract(rp)
}

// Update returns a builder for updating this RegisteredProvider.
// Note that you need to call RegisteredProvider.Unwrap() before calling this method if this RegisteredProvider
// was returned from a transaction, and the transaction was committed or rolled back.
func (rp *RegisteredProvider) Update() *RegisteredProviderUpdateOne {
	return NewRegisteredProviderClient(rp.config).UpdateOne(rp)
}

// Unwrap unwraps the RegisteredProvider entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rp *RegisteredProvider) Unwrap() *RegisteredProvider {
	_tx, ok := rp.config.driver.(*txDriver)
	if !ok {
		panic("ent: RegisteredProvider is not a transactional entity")
	}
	rp.config.driver = _tx.drv
	return rp
}

// String implements the fmt.Stringer.
func (rp *RegisteredProvider) String() string {
	var builder strings.Builder
	builder.WriteString("RegisteredProvider(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rp.ID))
	builder.WriteString("url=")
	builder.WriteString(fmt.Sprintf("%v", rp.URL))
	builder.WriteString(", ")
	builder.WriteString("participant_name=")
	builder.WriteString(rp.ParticipantName)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(rp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(rp.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// RegisteredProviders is a parsable slice of RegisteredProvider.
type RegisteredProviders []*RegisteredProvider

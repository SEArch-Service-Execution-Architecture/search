// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/clpombo/search/ent/compatibilityresult"
	"github.com/clpombo/search/ent/predicate"
	"github.com/clpombo/search/ent/registeredcontract"
	"github.com/clpombo/search/ent/registeredprovider"
	"github.com/google/uuid"
)

// RegisteredContractUpdate is the builder for updating RegisteredContract entities.
type RegisteredContractUpdate struct {
	config
	hooks    []Hook
	mutation *RegisteredContractMutation
}

// Where appends a list predicates to the RegisteredContractUpdate builder.
func (rcu *RegisteredContractUpdate) Where(ps ...predicate.RegisteredContract) *RegisteredContractUpdate {
	rcu.mutation.Where(ps...)
	return rcu
}

// SetFormat sets the "format" field.
func (rcu *RegisteredContractUpdate) SetFormat(i int) *RegisteredContractUpdate {
	rcu.mutation.ResetFormat()
	rcu.mutation.SetFormat(i)
	return rcu
}

// AddFormat adds i to the "format" field.
func (rcu *RegisteredContractUpdate) AddFormat(i int) *RegisteredContractUpdate {
	rcu.mutation.AddFormat(i)
	return rcu
}

// SetContract sets the "contract" field.
func (rcu *RegisteredContractUpdate) SetContract(b []byte) *RegisteredContractUpdate {
	rcu.mutation.SetContract(b)
	return rcu
}

// AddProviderIDs adds the "providers" edge to the RegisteredProvider entity by IDs.
func (rcu *RegisteredContractUpdate) AddProviderIDs(ids ...uuid.UUID) *RegisteredContractUpdate {
	rcu.mutation.AddProviderIDs(ids...)
	return rcu
}

// AddProviders adds the "providers" edges to the RegisteredProvider entity.
func (rcu *RegisteredContractUpdate) AddProviders(r ...*RegisteredProvider) *RegisteredContractUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rcu.AddProviderIDs(ids...)
}

// AddCompatibilityResultsAsRequirementIDs adds the "compatibility_results_as_requirement" edge to the CompatibilityResult entity by IDs.
func (rcu *RegisteredContractUpdate) AddCompatibilityResultsAsRequirementIDs(ids ...int) *RegisteredContractUpdate {
	rcu.mutation.AddCompatibilityResultsAsRequirementIDs(ids...)
	return rcu
}

// AddCompatibilityResultsAsRequirement adds the "compatibility_results_as_requirement" edges to the CompatibilityResult entity.
func (rcu *RegisteredContractUpdate) AddCompatibilityResultsAsRequirement(c ...*CompatibilityResult) *RegisteredContractUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return rcu.AddCompatibilityResultsAsRequirementIDs(ids...)
}

// AddCompatibilityResultsAsProviderIDs adds the "compatibility_results_as_provider" edge to the CompatibilityResult entity by IDs.
func (rcu *RegisteredContractUpdate) AddCompatibilityResultsAsProviderIDs(ids ...int) *RegisteredContractUpdate {
	rcu.mutation.AddCompatibilityResultsAsProviderIDs(ids...)
	return rcu
}

// AddCompatibilityResultsAsProvider adds the "compatibility_results_as_provider" edges to the CompatibilityResult entity.
func (rcu *RegisteredContractUpdate) AddCompatibilityResultsAsProvider(c ...*CompatibilityResult) *RegisteredContractUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return rcu.AddCompatibilityResultsAsProviderIDs(ids...)
}

// Mutation returns the RegisteredContractMutation object of the builder.
func (rcu *RegisteredContractUpdate) Mutation() *RegisteredContractMutation {
	return rcu.mutation
}

// ClearProviders clears all "providers" edges to the RegisteredProvider entity.
func (rcu *RegisteredContractUpdate) ClearProviders() *RegisteredContractUpdate {
	rcu.mutation.ClearProviders()
	return rcu
}

// RemoveProviderIDs removes the "providers" edge to RegisteredProvider entities by IDs.
func (rcu *RegisteredContractUpdate) RemoveProviderIDs(ids ...uuid.UUID) *RegisteredContractUpdate {
	rcu.mutation.RemoveProviderIDs(ids...)
	return rcu
}

// RemoveProviders removes "providers" edges to RegisteredProvider entities.
func (rcu *RegisteredContractUpdate) RemoveProviders(r ...*RegisteredProvider) *RegisteredContractUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rcu.RemoveProviderIDs(ids...)
}

// ClearCompatibilityResultsAsRequirement clears all "compatibility_results_as_requirement" edges to the CompatibilityResult entity.
func (rcu *RegisteredContractUpdate) ClearCompatibilityResultsAsRequirement() *RegisteredContractUpdate {
	rcu.mutation.ClearCompatibilityResultsAsRequirement()
	return rcu
}

// RemoveCompatibilityResultsAsRequirementIDs removes the "compatibility_results_as_requirement" edge to CompatibilityResult entities by IDs.
func (rcu *RegisteredContractUpdate) RemoveCompatibilityResultsAsRequirementIDs(ids ...int) *RegisteredContractUpdate {
	rcu.mutation.RemoveCompatibilityResultsAsRequirementIDs(ids...)
	return rcu
}

// RemoveCompatibilityResultsAsRequirement removes "compatibility_results_as_requirement" edges to CompatibilityResult entities.
func (rcu *RegisteredContractUpdate) RemoveCompatibilityResultsAsRequirement(c ...*CompatibilityResult) *RegisteredContractUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return rcu.RemoveCompatibilityResultsAsRequirementIDs(ids...)
}

// ClearCompatibilityResultsAsProvider clears all "compatibility_results_as_provider" edges to the CompatibilityResult entity.
func (rcu *RegisteredContractUpdate) ClearCompatibilityResultsAsProvider() *RegisteredContractUpdate {
	rcu.mutation.ClearCompatibilityResultsAsProvider()
	return rcu
}

// RemoveCompatibilityResultsAsProviderIDs removes the "compatibility_results_as_provider" edge to CompatibilityResult entities by IDs.
func (rcu *RegisteredContractUpdate) RemoveCompatibilityResultsAsProviderIDs(ids ...int) *RegisteredContractUpdate {
	rcu.mutation.RemoveCompatibilityResultsAsProviderIDs(ids...)
	return rcu
}

// RemoveCompatibilityResultsAsProvider removes "compatibility_results_as_provider" edges to CompatibilityResult entities.
func (rcu *RegisteredContractUpdate) RemoveCompatibilityResultsAsProvider(c ...*CompatibilityResult) *RegisteredContractUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return rcu.RemoveCompatibilityResultsAsProviderIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rcu *RegisteredContractUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, RegisteredContractMutation](ctx, rcu.sqlSave, rcu.mutation, rcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rcu *RegisteredContractUpdate) SaveX(ctx context.Context) int {
	affected, err := rcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rcu *RegisteredContractUpdate) Exec(ctx context.Context) error {
	_, err := rcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcu *RegisteredContractUpdate) ExecX(ctx context.Context) {
	if err := rcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rcu *RegisteredContractUpdate) check() error {
	if v, ok := rcu.mutation.Contract(); ok {
		if err := registeredcontract.ContractValidator(v); err != nil {
			return &ValidationError{Name: "contract", err: fmt.Errorf(`ent: validator failed for field "RegisteredContract.contract": %w`, err)}
		}
	}
	return nil
}

func (rcu *RegisteredContractUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(registeredcontract.Table, registeredcontract.Columns, sqlgraph.NewFieldSpec(registeredcontract.FieldID, field.TypeString))
	if ps := rcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rcu.mutation.Format(); ok {
		_spec.SetField(registeredcontract.FieldFormat, field.TypeInt, value)
	}
	if value, ok := rcu.mutation.AddedFormat(); ok {
		_spec.AddField(registeredcontract.FieldFormat, field.TypeInt, value)
	}
	if value, ok := rcu.mutation.Contract(); ok {
		_spec.SetField(registeredcontract.FieldContract, field.TypeBytes, value)
	}
	if rcu.mutation.ProvidersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   registeredcontract.ProvidersTable,
			Columns: []string{registeredcontract.ProvidersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registeredprovider.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.RemovedProvidersIDs(); len(nodes) > 0 && !rcu.mutation.ProvidersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   registeredcontract.ProvidersTable,
			Columns: []string{registeredcontract.ProvidersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registeredprovider.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.ProvidersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   registeredcontract.ProvidersTable,
			Columns: []string{registeredcontract.ProvidersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registeredprovider.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rcu.mutation.CompatibilityResultsAsRequirementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   registeredcontract.CompatibilityResultsAsRequirementTable,
			Columns: []string{registeredcontract.CompatibilityResultsAsRequirementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(compatibilityresult.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.RemovedCompatibilityResultsAsRequirementIDs(); len(nodes) > 0 && !rcu.mutation.CompatibilityResultsAsRequirementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   registeredcontract.CompatibilityResultsAsRequirementTable,
			Columns: []string{registeredcontract.CompatibilityResultsAsRequirementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(compatibilityresult.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.CompatibilityResultsAsRequirementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   registeredcontract.CompatibilityResultsAsRequirementTable,
			Columns: []string{registeredcontract.CompatibilityResultsAsRequirementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(compatibilityresult.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rcu.mutation.CompatibilityResultsAsProviderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   registeredcontract.CompatibilityResultsAsProviderTable,
			Columns: []string{registeredcontract.CompatibilityResultsAsProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(compatibilityresult.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.RemovedCompatibilityResultsAsProviderIDs(); len(nodes) > 0 && !rcu.mutation.CompatibilityResultsAsProviderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   registeredcontract.CompatibilityResultsAsProviderTable,
			Columns: []string{registeredcontract.CompatibilityResultsAsProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(compatibilityresult.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.CompatibilityResultsAsProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   registeredcontract.CompatibilityResultsAsProviderTable,
			Columns: []string{registeredcontract.CompatibilityResultsAsProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(compatibilityresult.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{registeredcontract.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rcu.mutation.done = true
	return n, nil
}

// RegisteredContractUpdateOne is the builder for updating a single RegisteredContract entity.
type RegisteredContractUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RegisteredContractMutation
}

// SetFormat sets the "format" field.
func (rcuo *RegisteredContractUpdateOne) SetFormat(i int) *RegisteredContractUpdateOne {
	rcuo.mutation.ResetFormat()
	rcuo.mutation.SetFormat(i)
	return rcuo
}

// AddFormat adds i to the "format" field.
func (rcuo *RegisteredContractUpdateOne) AddFormat(i int) *RegisteredContractUpdateOne {
	rcuo.mutation.AddFormat(i)
	return rcuo
}

// SetContract sets the "contract" field.
func (rcuo *RegisteredContractUpdateOne) SetContract(b []byte) *RegisteredContractUpdateOne {
	rcuo.mutation.SetContract(b)
	return rcuo
}

// AddProviderIDs adds the "providers" edge to the RegisteredProvider entity by IDs.
func (rcuo *RegisteredContractUpdateOne) AddProviderIDs(ids ...uuid.UUID) *RegisteredContractUpdateOne {
	rcuo.mutation.AddProviderIDs(ids...)
	return rcuo
}

// AddProviders adds the "providers" edges to the RegisteredProvider entity.
func (rcuo *RegisteredContractUpdateOne) AddProviders(r ...*RegisteredProvider) *RegisteredContractUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rcuo.AddProviderIDs(ids...)
}

// AddCompatibilityResultsAsRequirementIDs adds the "compatibility_results_as_requirement" edge to the CompatibilityResult entity by IDs.
func (rcuo *RegisteredContractUpdateOne) AddCompatibilityResultsAsRequirementIDs(ids ...int) *RegisteredContractUpdateOne {
	rcuo.mutation.AddCompatibilityResultsAsRequirementIDs(ids...)
	return rcuo
}

// AddCompatibilityResultsAsRequirement adds the "compatibility_results_as_requirement" edges to the CompatibilityResult entity.
func (rcuo *RegisteredContractUpdateOne) AddCompatibilityResultsAsRequirement(c ...*CompatibilityResult) *RegisteredContractUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return rcuo.AddCompatibilityResultsAsRequirementIDs(ids...)
}

// AddCompatibilityResultsAsProviderIDs adds the "compatibility_results_as_provider" edge to the CompatibilityResult entity by IDs.
func (rcuo *RegisteredContractUpdateOne) AddCompatibilityResultsAsProviderIDs(ids ...int) *RegisteredContractUpdateOne {
	rcuo.mutation.AddCompatibilityResultsAsProviderIDs(ids...)
	return rcuo
}

// AddCompatibilityResultsAsProvider adds the "compatibility_results_as_provider" edges to the CompatibilityResult entity.
func (rcuo *RegisteredContractUpdateOne) AddCompatibilityResultsAsProvider(c ...*CompatibilityResult) *RegisteredContractUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return rcuo.AddCompatibilityResultsAsProviderIDs(ids...)
}

// Mutation returns the RegisteredContractMutation object of the builder.
func (rcuo *RegisteredContractUpdateOne) Mutation() *RegisteredContractMutation {
	return rcuo.mutation
}

// ClearProviders clears all "providers" edges to the RegisteredProvider entity.
func (rcuo *RegisteredContractUpdateOne) ClearProviders() *RegisteredContractUpdateOne {
	rcuo.mutation.ClearProviders()
	return rcuo
}

// RemoveProviderIDs removes the "providers" edge to RegisteredProvider entities by IDs.
func (rcuo *RegisteredContractUpdateOne) RemoveProviderIDs(ids ...uuid.UUID) *RegisteredContractUpdateOne {
	rcuo.mutation.RemoveProviderIDs(ids...)
	return rcuo
}

// RemoveProviders removes "providers" edges to RegisteredProvider entities.
func (rcuo *RegisteredContractUpdateOne) RemoveProviders(r ...*RegisteredProvider) *RegisteredContractUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rcuo.RemoveProviderIDs(ids...)
}

// ClearCompatibilityResultsAsRequirement clears all "compatibility_results_as_requirement" edges to the CompatibilityResult entity.
func (rcuo *RegisteredContractUpdateOne) ClearCompatibilityResultsAsRequirement() *RegisteredContractUpdateOne {
	rcuo.mutation.ClearCompatibilityResultsAsRequirement()
	return rcuo
}

// RemoveCompatibilityResultsAsRequirementIDs removes the "compatibility_results_as_requirement" edge to CompatibilityResult entities by IDs.
func (rcuo *RegisteredContractUpdateOne) RemoveCompatibilityResultsAsRequirementIDs(ids ...int) *RegisteredContractUpdateOne {
	rcuo.mutation.RemoveCompatibilityResultsAsRequirementIDs(ids...)
	return rcuo
}

// RemoveCompatibilityResultsAsRequirement removes "compatibility_results_as_requirement" edges to CompatibilityResult entities.
func (rcuo *RegisteredContractUpdateOne) RemoveCompatibilityResultsAsRequirement(c ...*CompatibilityResult) *RegisteredContractUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return rcuo.RemoveCompatibilityResultsAsRequirementIDs(ids...)
}

// ClearCompatibilityResultsAsProvider clears all "compatibility_results_as_provider" edges to the CompatibilityResult entity.
func (rcuo *RegisteredContractUpdateOne) ClearCompatibilityResultsAsProvider() *RegisteredContractUpdateOne {
	rcuo.mutation.ClearCompatibilityResultsAsProvider()
	return rcuo
}

// RemoveCompatibilityResultsAsProviderIDs removes the "compatibility_results_as_provider" edge to CompatibilityResult entities by IDs.
func (rcuo *RegisteredContractUpdateOne) RemoveCompatibilityResultsAsProviderIDs(ids ...int) *RegisteredContractUpdateOne {
	rcuo.mutation.RemoveCompatibilityResultsAsProviderIDs(ids...)
	return rcuo
}

// RemoveCompatibilityResultsAsProvider removes "compatibility_results_as_provider" edges to CompatibilityResult entities.
func (rcuo *RegisteredContractUpdateOne) RemoveCompatibilityResultsAsProvider(c ...*CompatibilityResult) *RegisteredContractUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return rcuo.RemoveCompatibilityResultsAsProviderIDs(ids...)
}

// Where appends a list predicates to the RegisteredContractUpdate builder.
func (rcuo *RegisteredContractUpdateOne) Where(ps ...predicate.RegisteredContract) *RegisteredContractUpdateOne {
	rcuo.mutation.Where(ps...)
	return rcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rcuo *RegisteredContractUpdateOne) Select(field string, fields ...string) *RegisteredContractUpdateOne {
	rcuo.fields = append([]string{field}, fields...)
	return rcuo
}

// Save executes the query and returns the updated RegisteredContract entity.
func (rcuo *RegisteredContractUpdateOne) Save(ctx context.Context) (*RegisteredContract, error) {
	return withHooks[*RegisteredContract, RegisteredContractMutation](ctx, rcuo.sqlSave, rcuo.mutation, rcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rcuo *RegisteredContractUpdateOne) SaveX(ctx context.Context) *RegisteredContract {
	node, err := rcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rcuo *RegisteredContractUpdateOne) Exec(ctx context.Context) error {
	_, err := rcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcuo *RegisteredContractUpdateOne) ExecX(ctx context.Context) {
	if err := rcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rcuo *RegisteredContractUpdateOne) check() error {
	if v, ok := rcuo.mutation.Contract(); ok {
		if err := registeredcontract.ContractValidator(v); err != nil {
			return &ValidationError{Name: "contract", err: fmt.Errorf(`ent: validator failed for field "RegisteredContract.contract": %w`, err)}
		}
	}
	return nil
}

func (rcuo *RegisteredContractUpdateOne) sqlSave(ctx context.Context) (_node *RegisteredContract, err error) {
	if err := rcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(registeredcontract.Table, registeredcontract.Columns, sqlgraph.NewFieldSpec(registeredcontract.FieldID, field.TypeString))
	id, ok := rcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RegisteredContract.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, registeredcontract.FieldID)
		for _, f := range fields {
			if !registeredcontract.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != registeredcontract.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rcuo.mutation.Format(); ok {
		_spec.SetField(registeredcontract.FieldFormat, field.TypeInt, value)
	}
	if value, ok := rcuo.mutation.AddedFormat(); ok {
		_spec.AddField(registeredcontract.FieldFormat, field.TypeInt, value)
	}
	if value, ok := rcuo.mutation.Contract(); ok {
		_spec.SetField(registeredcontract.FieldContract, field.TypeBytes, value)
	}
	if rcuo.mutation.ProvidersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   registeredcontract.ProvidersTable,
			Columns: []string{registeredcontract.ProvidersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registeredprovider.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.RemovedProvidersIDs(); len(nodes) > 0 && !rcuo.mutation.ProvidersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   registeredcontract.ProvidersTable,
			Columns: []string{registeredcontract.ProvidersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registeredprovider.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.ProvidersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   registeredcontract.ProvidersTable,
			Columns: []string{registeredcontract.ProvidersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registeredprovider.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rcuo.mutation.CompatibilityResultsAsRequirementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   registeredcontract.CompatibilityResultsAsRequirementTable,
			Columns: []string{registeredcontract.CompatibilityResultsAsRequirementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(compatibilityresult.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.RemovedCompatibilityResultsAsRequirementIDs(); len(nodes) > 0 && !rcuo.mutation.CompatibilityResultsAsRequirementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   registeredcontract.CompatibilityResultsAsRequirementTable,
			Columns: []string{registeredcontract.CompatibilityResultsAsRequirementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(compatibilityresult.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.CompatibilityResultsAsRequirementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   registeredcontract.CompatibilityResultsAsRequirementTable,
			Columns: []string{registeredcontract.CompatibilityResultsAsRequirementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(compatibilityresult.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rcuo.mutation.CompatibilityResultsAsProviderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   registeredcontract.CompatibilityResultsAsProviderTable,
			Columns: []string{registeredcontract.CompatibilityResultsAsProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(compatibilityresult.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.RemovedCompatibilityResultsAsProviderIDs(); len(nodes) > 0 && !rcuo.mutation.CompatibilityResultsAsProviderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   registeredcontract.CompatibilityResultsAsProviderTable,
			Columns: []string{registeredcontract.CompatibilityResultsAsProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(compatibilityresult.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.CompatibilityResultsAsProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   registeredcontract.CompatibilityResultsAsProviderTable,
			Columns: []string{registeredcontract.CompatibilityResultsAsProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(compatibilityresult.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RegisteredContract{config: rcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{registeredcontract.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rcuo.mutation.done = true
	return _node, nil
}

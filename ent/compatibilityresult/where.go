// Code generated by ent, DO NOT EDIT.

package compatibilityresult

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/clpombo/search/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldLTE(FieldID, id))
}

// ReqContractID applies equality check predicate on the "req_contract_id" field. It's identical to ReqContractIDEQ.
func ReqContractID(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldEQ(FieldReqContractID, v))
}

// ProvContractID applies equality check predicate on the "prov_contract_id" field. It's identical to ProvContractIDEQ.
func ProvContractID(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldEQ(FieldProvContractID, v))
}

// ParticipantNameReq applies equality check predicate on the "participant_name_req" field. It's identical to ParticipantNameReqEQ.
func ParticipantNameReq(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldEQ(FieldParticipantNameReq, v))
}

// ParticipantNameProv applies equality check predicate on the "participant_name_prov" field. It's identical to ParticipantNameProvEQ.
func ParticipantNameProv(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldEQ(FieldParticipantNameProv, v))
}

// Result applies equality check predicate on the "result" field. It's identical to ResultEQ.
func Result(v bool) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldEQ(FieldResult, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldEQ(FieldUpdatedAt, v))
}

// ReqContractIDEQ applies the EQ predicate on the "req_contract_id" field.
func ReqContractIDEQ(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldEQ(FieldReqContractID, v))
}

// ReqContractIDNEQ applies the NEQ predicate on the "req_contract_id" field.
func ReqContractIDNEQ(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldNEQ(FieldReqContractID, v))
}

// ReqContractIDIn applies the In predicate on the "req_contract_id" field.
func ReqContractIDIn(vs ...string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldIn(FieldReqContractID, vs...))
}

// ReqContractIDNotIn applies the NotIn predicate on the "req_contract_id" field.
func ReqContractIDNotIn(vs ...string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldNotIn(FieldReqContractID, vs...))
}

// ReqContractIDGT applies the GT predicate on the "req_contract_id" field.
func ReqContractIDGT(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldGT(FieldReqContractID, v))
}

// ReqContractIDGTE applies the GTE predicate on the "req_contract_id" field.
func ReqContractIDGTE(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldGTE(FieldReqContractID, v))
}

// ReqContractIDLT applies the LT predicate on the "req_contract_id" field.
func ReqContractIDLT(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldLT(FieldReqContractID, v))
}

// ReqContractIDLTE applies the LTE predicate on the "req_contract_id" field.
func ReqContractIDLTE(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldLTE(FieldReqContractID, v))
}

// ReqContractIDContains applies the Contains predicate on the "req_contract_id" field.
func ReqContractIDContains(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldContains(FieldReqContractID, v))
}

// ReqContractIDHasPrefix applies the HasPrefix predicate on the "req_contract_id" field.
func ReqContractIDHasPrefix(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldHasPrefix(FieldReqContractID, v))
}

// ReqContractIDHasSuffix applies the HasSuffix predicate on the "req_contract_id" field.
func ReqContractIDHasSuffix(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldHasSuffix(FieldReqContractID, v))
}

// ReqContractIDEqualFold applies the EqualFold predicate on the "req_contract_id" field.
func ReqContractIDEqualFold(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldEqualFold(FieldReqContractID, v))
}

// ReqContractIDContainsFold applies the ContainsFold predicate on the "req_contract_id" field.
func ReqContractIDContainsFold(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldContainsFold(FieldReqContractID, v))
}

// ProvContractIDEQ applies the EQ predicate on the "prov_contract_id" field.
func ProvContractIDEQ(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldEQ(FieldProvContractID, v))
}

// ProvContractIDNEQ applies the NEQ predicate on the "prov_contract_id" field.
func ProvContractIDNEQ(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldNEQ(FieldProvContractID, v))
}

// ProvContractIDIn applies the In predicate on the "prov_contract_id" field.
func ProvContractIDIn(vs ...string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldIn(FieldProvContractID, vs...))
}

// ProvContractIDNotIn applies the NotIn predicate on the "prov_contract_id" field.
func ProvContractIDNotIn(vs ...string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldNotIn(FieldProvContractID, vs...))
}

// ProvContractIDGT applies the GT predicate on the "prov_contract_id" field.
func ProvContractIDGT(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldGT(FieldProvContractID, v))
}

// ProvContractIDGTE applies the GTE predicate on the "prov_contract_id" field.
func ProvContractIDGTE(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldGTE(FieldProvContractID, v))
}

// ProvContractIDLT applies the LT predicate on the "prov_contract_id" field.
func ProvContractIDLT(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldLT(FieldProvContractID, v))
}

// ProvContractIDLTE applies the LTE predicate on the "prov_contract_id" field.
func ProvContractIDLTE(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldLTE(FieldProvContractID, v))
}

// ProvContractIDContains applies the Contains predicate on the "prov_contract_id" field.
func ProvContractIDContains(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldContains(FieldProvContractID, v))
}

// ProvContractIDHasPrefix applies the HasPrefix predicate on the "prov_contract_id" field.
func ProvContractIDHasPrefix(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldHasPrefix(FieldProvContractID, v))
}

// ProvContractIDHasSuffix applies the HasSuffix predicate on the "prov_contract_id" field.
func ProvContractIDHasSuffix(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldHasSuffix(FieldProvContractID, v))
}

// ProvContractIDEqualFold applies the EqualFold predicate on the "prov_contract_id" field.
func ProvContractIDEqualFold(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldEqualFold(FieldProvContractID, v))
}

// ProvContractIDContainsFold applies the ContainsFold predicate on the "prov_contract_id" field.
func ProvContractIDContainsFold(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldContainsFold(FieldProvContractID, v))
}

// ParticipantNameReqEQ applies the EQ predicate on the "participant_name_req" field.
func ParticipantNameReqEQ(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldEQ(FieldParticipantNameReq, v))
}

// ParticipantNameReqNEQ applies the NEQ predicate on the "participant_name_req" field.
func ParticipantNameReqNEQ(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldNEQ(FieldParticipantNameReq, v))
}

// ParticipantNameReqIn applies the In predicate on the "participant_name_req" field.
func ParticipantNameReqIn(vs ...string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldIn(FieldParticipantNameReq, vs...))
}

// ParticipantNameReqNotIn applies the NotIn predicate on the "participant_name_req" field.
func ParticipantNameReqNotIn(vs ...string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldNotIn(FieldParticipantNameReq, vs...))
}

// ParticipantNameReqGT applies the GT predicate on the "participant_name_req" field.
func ParticipantNameReqGT(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldGT(FieldParticipantNameReq, v))
}

// ParticipantNameReqGTE applies the GTE predicate on the "participant_name_req" field.
func ParticipantNameReqGTE(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldGTE(FieldParticipantNameReq, v))
}

// ParticipantNameReqLT applies the LT predicate on the "participant_name_req" field.
func ParticipantNameReqLT(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldLT(FieldParticipantNameReq, v))
}

// ParticipantNameReqLTE applies the LTE predicate on the "participant_name_req" field.
func ParticipantNameReqLTE(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldLTE(FieldParticipantNameReq, v))
}

// ParticipantNameReqContains applies the Contains predicate on the "participant_name_req" field.
func ParticipantNameReqContains(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldContains(FieldParticipantNameReq, v))
}

// ParticipantNameReqHasPrefix applies the HasPrefix predicate on the "participant_name_req" field.
func ParticipantNameReqHasPrefix(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldHasPrefix(FieldParticipantNameReq, v))
}

// ParticipantNameReqHasSuffix applies the HasSuffix predicate on the "participant_name_req" field.
func ParticipantNameReqHasSuffix(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldHasSuffix(FieldParticipantNameReq, v))
}

// ParticipantNameReqEqualFold applies the EqualFold predicate on the "participant_name_req" field.
func ParticipantNameReqEqualFold(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldEqualFold(FieldParticipantNameReq, v))
}

// ParticipantNameReqContainsFold applies the ContainsFold predicate on the "participant_name_req" field.
func ParticipantNameReqContainsFold(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldContainsFold(FieldParticipantNameReq, v))
}

// ParticipantNameProvEQ applies the EQ predicate on the "participant_name_prov" field.
func ParticipantNameProvEQ(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldEQ(FieldParticipantNameProv, v))
}

// ParticipantNameProvNEQ applies the NEQ predicate on the "participant_name_prov" field.
func ParticipantNameProvNEQ(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldNEQ(FieldParticipantNameProv, v))
}

// ParticipantNameProvIn applies the In predicate on the "participant_name_prov" field.
func ParticipantNameProvIn(vs ...string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldIn(FieldParticipantNameProv, vs...))
}

// ParticipantNameProvNotIn applies the NotIn predicate on the "participant_name_prov" field.
func ParticipantNameProvNotIn(vs ...string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldNotIn(FieldParticipantNameProv, vs...))
}

// ParticipantNameProvGT applies the GT predicate on the "participant_name_prov" field.
func ParticipantNameProvGT(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldGT(FieldParticipantNameProv, v))
}

// ParticipantNameProvGTE applies the GTE predicate on the "participant_name_prov" field.
func ParticipantNameProvGTE(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldGTE(FieldParticipantNameProv, v))
}

// ParticipantNameProvLT applies the LT predicate on the "participant_name_prov" field.
func ParticipantNameProvLT(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldLT(FieldParticipantNameProv, v))
}

// ParticipantNameProvLTE applies the LTE predicate on the "participant_name_prov" field.
func ParticipantNameProvLTE(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldLTE(FieldParticipantNameProv, v))
}

// ParticipantNameProvContains applies the Contains predicate on the "participant_name_prov" field.
func ParticipantNameProvContains(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldContains(FieldParticipantNameProv, v))
}

// ParticipantNameProvHasPrefix applies the HasPrefix predicate on the "participant_name_prov" field.
func ParticipantNameProvHasPrefix(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldHasPrefix(FieldParticipantNameProv, v))
}

// ParticipantNameProvHasSuffix applies the HasSuffix predicate on the "participant_name_prov" field.
func ParticipantNameProvHasSuffix(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldHasSuffix(FieldParticipantNameProv, v))
}

// ParticipantNameProvEqualFold applies the EqualFold predicate on the "participant_name_prov" field.
func ParticipantNameProvEqualFold(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldEqualFold(FieldParticipantNameProv, v))
}

// ParticipantNameProvContainsFold applies the ContainsFold predicate on the "participant_name_prov" field.
func ParticipantNameProvContainsFold(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldContainsFold(FieldParticipantNameProv, v))
}

// ResultEQ applies the EQ predicate on the "result" field.
func ResultEQ(v bool) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldEQ(FieldResult, v))
}

// ResultNEQ applies the NEQ predicate on the "result" field.
func ResultNEQ(v bool) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldNEQ(FieldResult, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasRequirementContract applies the HasEdge predicate on the "requirement_contract" edge.
func HasRequirementContract() predicate.CompatibilityResult {
	return predicate.CompatibilityResult(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RequirementContractTable, RequirementContractColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRequirementContractWith applies the HasEdge predicate on the "requirement_contract" edge with a given conditions (other predicates).
func HasRequirementContractWith(preds ...predicate.RegisteredContract) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(func(s *sql.Selector) {
		step := newRequirementContractStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProviderContract applies the HasEdge predicate on the "provider_contract" edge.
func HasProviderContract() predicate.CompatibilityResult {
	return predicate.CompatibilityResult(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ProviderContractTable, ProviderContractColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProviderContractWith applies the HasEdge predicate on the "provider_contract" edge with a given conditions (other predicates).
func HasProviderContractWith(preds ...predicate.RegisteredContract) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(func(s *sql.Selector) {
		step := newProviderContractStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CompatibilityResult) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CompatibilityResult) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CompatibilityResult) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(func(s *sql.Selector) {
		p(s.Not())
	})
}

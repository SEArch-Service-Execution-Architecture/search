// Code generated by ent, DO NOT EDIT.

package compatibilityresult

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/pmontepagano/search/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldLTE(FieldID, id))
}

// RequirementContractID applies equality check predicate on the "requirement_contract_id" field. It's identical to RequirementContractIDEQ.
func RequirementContractID(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldEQ(FieldRequirementContractID, v))
}

// ProviderContractID applies equality check predicate on the "provider_contract_id" field. It's identical to ProviderContractIDEQ.
func ProviderContractID(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldEQ(FieldProviderContractID, v))
}

// Result applies equality check predicate on the "result" field. It's identical to ResultEQ.
func Result(v bool) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldEQ(FieldResult, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldEQ(FieldUpdatedAt, v))
}

// RequirementContractIDEQ applies the EQ predicate on the "requirement_contract_id" field.
func RequirementContractIDEQ(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldEQ(FieldRequirementContractID, v))
}

// RequirementContractIDNEQ applies the NEQ predicate on the "requirement_contract_id" field.
func RequirementContractIDNEQ(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldNEQ(FieldRequirementContractID, v))
}

// RequirementContractIDIn applies the In predicate on the "requirement_contract_id" field.
func RequirementContractIDIn(vs ...string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldIn(FieldRequirementContractID, vs...))
}

// RequirementContractIDNotIn applies the NotIn predicate on the "requirement_contract_id" field.
func RequirementContractIDNotIn(vs ...string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldNotIn(FieldRequirementContractID, vs...))
}

// RequirementContractIDGT applies the GT predicate on the "requirement_contract_id" field.
func RequirementContractIDGT(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldGT(FieldRequirementContractID, v))
}

// RequirementContractIDGTE applies the GTE predicate on the "requirement_contract_id" field.
func RequirementContractIDGTE(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldGTE(FieldRequirementContractID, v))
}

// RequirementContractIDLT applies the LT predicate on the "requirement_contract_id" field.
func RequirementContractIDLT(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldLT(FieldRequirementContractID, v))
}

// RequirementContractIDLTE applies the LTE predicate on the "requirement_contract_id" field.
func RequirementContractIDLTE(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldLTE(FieldRequirementContractID, v))
}

// RequirementContractIDContains applies the Contains predicate on the "requirement_contract_id" field.
func RequirementContractIDContains(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldContains(FieldRequirementContractID, v))
}

// RequirementContractIDHasPrefix applies the HasPrefix predicate on the "requirement_contract_id" field.
func RequirementContractIDHasPrefix(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldHasPrefix(FieldRequirementContractID, v))
}

// RequirementContractIDHasSuffix applies the HasSuffix predicate on the "requirement_contract_id" field.
func RequirementContractIDHasSuffix(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldHasSuffix(FieldRequirementContractID, v))
}

// RequirementContractIDEqualFold applies the EqualFold predicate on the "requirement_contract_id" field.
func RequirementContractIDEqualFold(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldEqualFold(FieldRequirementContractID, v))
}

// RequirementContractIDContainsFold applies the ContainsFold predicate on the "requirement_contract_id" field.
func RequirementContractIDContainsFold(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldContainsFold(FieldRequirementContractID, v))
}

// ProviderContractIDEQ applies the EQ predicate on the "provider_contract_id" field.
func ProviderContractIDEQ(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldEQ(FieldProviderContractID, v))
}

// ProviderContractIDNEQ applies the NEQ predicate on the "provider_contract_id" field.
func ProviderContractIDNEQ(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldNEQ(FieldProviderContractID, v))
}

// ProviderContractIDIn applies the In predicate on the "provider_contract_id" field.
func ProviderContractIDIn(vs ...string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldIn(FieldProviderContractID, vs...))
}

// ProviderContractIDNotIn applies the NotIn predicate on the "provider_contract_id" field.
func ProviderContractIDNotIn(vs ...string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldNotIn(FieldProviderContractID, vs...))
}

// ProviderContractIDGT applies the GT predicate on the "provider_contract_id" field.
func ProviderContractIDGT(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldGT(FieldProviderContractID, v))
}

// ProviderContractIDGTE applies the GTE predicate on the "provider_contract_id" field.
func ProviderContractIDGTE(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldGTE(FieldProviderContractID, v))
}

// ProviderContractIDLT applies the LT predicate on the "provider_contract_id" field.
func ProviderContractIDLT(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldLT(FieldProviderContractID, v))
}

// ProviderContractIDLTE applies the LTE predicate on the "provider_contract_id" field.
func ProviderContractIDLTE(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldLTE(FieldProviderContractID, v))
}

// ProviderContractIDContains applies the Contains predicate on the "provider_contract_id" field.
func ProviderContractIDContains(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldContains(FieldProviderContractID, v))
}

// ProviderContractIDHasPrefix applies the HasPrefix predicate on the "provider_contract_id" field.
func ProviderContractIDHasPrefix(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldHasPrefix(FieldProviderContractID, v))
}

// ProviderContractIDHasSuffix applies the HasSuffix predicate on the "provider_contract_id" field.
func ProviderContractIDHasSuffix(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldHasSuffix(FieldProviderContractID, v))
}

// ProviderContractIDEqualFold applies the EqualFold predicate on the "provider_contract_id" field.
func ProviderContractIDEqualFold(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldEqualFold(FieldProviderContractID, v))
}

// ProviderContractIDContainsFold applies the ContainsFold predicate on the "provider_contract_id" field.
func ProviderContractIDContainsFold(v string) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldContainsFold(FieldProviderContractID, v))
}

// ResultEQ applies the EQ predicate on the "result" field.
func ResultEQ(v bool) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldEQ(FieldResult, v))
}

// ResultNEQ applies the NEQ predicate on the "result" field.
func ResultNEQ(v bool) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldNEQ(FieldResult, v))
}

// MappingIsNil applies the IsNil predicate on the "mapping" field.
func MappingIsNil() predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldIsNull(FieldMapping))
}

// MappingNotNil applies the NotNil predicate on the "mapping" field.
func MappingNotNil() predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldNotNull(FieldMapping))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasRequirementContract applies the HasEdge predicate on the "requirement_contract" edge.
func HasRequirementContract() predicate.CompatibilityResult {
	return predicate.CompatibilityResult(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RequirementContractTable, RequirementContractColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRequirementContractWith applies the HasEdge predicate on the "requirement_contract" edge with a given conditions (other predicates).
func HasRequirementContractWith(preds ...predicate.RegisteredContract) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(func(s *sql.Selector) {
		step := newRequirementContractStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProviderContract applies the HasEdge predicate on the "provider_contract" edge.
func HasProviderContract() predicate.CompatibilityResult {
	return predicate.CompatibilityResult(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ProviderContractTable, ProviderContractColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProviderContractWith applies the HasEdge predicate on the "provider_contract" edge with a given conditions (other predicates).
func HasProviderContractWith(preds ...predicate.RegisteredContract) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(func(s *sql.Selector) {
		step := newProviderContractStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CompatibilityResult) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CompatibilityResult) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CompatibilityResult) predicate.CompatibilityResult {
	return predicate.CompatibilityResult(sql.NotPredicates(p))
}

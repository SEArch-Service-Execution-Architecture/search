// Code generated by ent, DO NOT EDIT.

package compatibilityresult

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the compatibilityresult type in the database.
	Label = "compatibility_result"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRequirementContractID holds the string denoting the requirement_contract_id field in the database.
	FieldRequirementContractID = "requirement_contract_id"
	// FieldProviderContractID holds the string denoting the provider_contract_id field in the database.
	FieldProviderContractID = "provider_contract_id"
	// FieldResult holds the string denoting the result field in the database.
	FieldResult = "result"
	// FieldMapping holds the string denoting the mapping field in the database.
	FieldMapping = "mapping"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeRequirementContract holds the string denoting the requirement_contract edge name in mutations.
	EdgeRequirementContract = "requirement_contract"
	// EdgeProviderContract holds the string denoting the provider_contract edge name in mutations.
	EdgeProviderContract = "provider_contract"
	// Table holds the table name of the compatibilityresult in the database.
	Table = "compatibility_results"
	// RequirementContractTable is the table that holds the requirement_contract relation/edge.
	RequirementContractTable = "compatibility_results"
	// RequirementContractInverseTable is the table name for the RegisteredContract entity.
	// It exists in this package in order to avoid circular dependency with the "registeredcontract" package.
	RequirementContractInverseTable = "registered_contracts"
	// RequirementContractColumn is the table column denoting the requirement_contract relation/edge.
	RequirementContractColumn = "requirement_contract_id"
	// ProviderContractTable is the table that holds the provider_contract relation/edge.
	ProviderContractTable = "compatibility_results"
	// ProviderContractInverseTable is the table name for the RegisteredContract entity.
	// It exists in this package in order to avoid circular dependency with the "registeredcontract" package.
	ProviderContractInverseTable = "registered_contracts"
	// ProviderContractColumn is the table column denoting the provider_contract relation/edge.
	ProviderContractColumn = "provider_contract_id"
)

// Columns holds all SQL columns for compatibilityresult fields.
var Columns = []string{
	FieldID,
	FieldRequirementContractID,
	FieldProviderContractID,
	FieldResult,
	FieldMapping,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// RequirementContractIDValidator is a validator for the "requirement_contract_id" field. It is called by the builders before save.
	RequirementContractIDValidator func(string) error
	// ProviderContractIDValidator is a validator for the "provider_contract_id" field. It is called by the builders before save.
	ProviderContractIDValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the CompatibilityResult queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRequirementContractID orders the results by the requirement_contract_id field.
func ByRequirementContractID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequirementContractID, opts...).ToFunc()
}

// ByProviderContractID orders the results by the provider_contract_id field.
func ByProviderContractID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProviderContractID, opts...).ToFunc()
}

// ByResult orders the results by the result field.
func ByResult(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResult, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByRequirementContractField orders the results by requirement_contract field.
func ByRequirementContractField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRequirementContractStep(), sql.OrderByField(field, opts...))
	}
}

// ByProviderContractField orders the results by provider_contract field.
func ByProviderContractField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProviderContractStep(), sql.OrderByField(field, opts...))
	}
}
func newRequirementContractStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RequirementContractInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RequirementContractTable, RequirementContractColumn),
	)
}
func newProviderContractStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProviderContractInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ProviderContractTable, ProviderContractColumn),
	)
}

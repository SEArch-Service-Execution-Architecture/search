// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/google/uuid"
	"github.com/SEArch-Service-Execution-Architecture/search/ent/compatibilityresult"
	"github.com/SEArch-Service-Execution-Architecture/search/ent/registeredcontract"
	"github.com/SEArch-Service-Execution-Architecture/search/ent/registeredprovider"
	"github.com/SEArch-Service-Execution-Architecture/search/ent/schema"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	compatibilityresultFields := schema.CompatibilityResult{}.Fields()
	_ = compatibilityresultFields
	// compatibilityresultDescRequirementContractID is the schema descriptor for requirement_contract_id field.
	compatibilityresultDescRequirementContractID := compatibilityresultFields[0].Descriptor()
	// compatibilityresult.RequirementContractIDValidator is a validator for the "requirement_contract_id" field. It is called by the builders before save.
	compatibilityresult.RequirementContractIDValidator = func() func(string) error {
		validators := compatibilityresultDescRequirementContractID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(requirement_contract string) error {
			for _, fn := range fns {
				if err := fn(requirement_contract); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// compatibilityresultDescProviderContractID is the schema descriptor for provider_contract_id field.
	compatibilityresultDescProviderContractID := compatibilityresultFields[1].Descriptor()
	// compatibilityresult.ProviderContractIDValidator is a validator for the "provider_contract_id" field. It is called by the builders before save.
	compatibilityresult.ProviderContractIDValidator = func() func(string) error {
		validators := compatibilityresultDescProviderContractID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(provider_contract string) error {
			for _, fn := range fns {
				if err := fn(provider_contract); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// compatibilityresultDescCreatedAt is the schema descriptor for created_at field.
	compatibilityresultDescCreatedAt := compatibilityresultFields[4].Descriptor()
	// compatibilityresult.DefaultCreatedAt holds the default value on creation for the created_at field.
	compatibilityresult.DefaultCreatedAt = compatibilityresultDescCreatedAt.Default.(func() time.Time)
	// compatibilityresultDescUpdatedAt is the schema descriptor for updated_at field.
	compatibilityresultDescUpdatedAt := compatibilityresultFields[5].Descriptor()
	// compatibilityresult.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	compatibilityresult.DefaultUpdatedAt = compatibilityresultDescUpdatedAt.Default.(func() time.Time)
	// compatibilityresult.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	compatibilityresult.UpdateDefaultUpdatedAt = compatibilityresultDescUpdatedAt.UpdateDefault.(func() time.Time)
	registeredcontractFields := schema.RegisteredContract{}.Fields()
	_ = registeredcontractFields
	// registeredcontractDescContract is the schema descriptor for contract field.
	registeredcontractDescContract := registeredcontractFields[2].Descriptor()
	// registeredcontract.ContractValidator is a validator for the "contract" field. It is called by the builders before save.
	registeredcontract.ContractValidator = registeredcontractDescContract.Validators[0].(func([]byte) error)
	// registeredcontractDescCreatedAt is the schema descriptor for created_at field.
	registeredcontractDescCreatedAt := registeredcontractFields[3].Descriptor()
	// registeredcontract.DefaultCreatedAt holds the default value on creation for the created_at field.
	registeredcontract.DefaultCreatedAt = registeredcontractDescCreatedAt.Default.(func() time.Time)
	// registeredcontractDescID is the schema descriptor for id field.
	registeredcontractDescID := registeredcontractFields[0].Descriptor()
	// registeredcontract.IDValidator is a validator for the "id" field. It is called by the builders before save.
	registeredcontract.IDValidator = func() func(string) error {
		validators := registeredcontractDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	registeredproviderFields := schema.RegisteredProvider{}.Fields()
	_ = registeredproviderFields
	// registeredproviderDescContractID is the schema descriptor for contract_id field.
	registeredproviderDescContractID := registeredproviderFields[2].Descriptor()
	// registeredprovider.ContractIDValidator is a validator for the "contract_id" field. It is called by the builders before save.
	registeredprovider.ContractIDValidator = func() func(string) error {
		validators := registeredproviderDescContractID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(contract string) error {
			for _, fn := range fns {
				if err := fn(contract); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// registeredproviderDescCreatedAt is the schema descriptor for created_at field.
	registeredproviderDescCreatedAt := registeredproviderFields[3].Descriptor()
	// registeredprovider.DefaultCreatedAt holds the default value on creation for the created_at field.
	registeredprovider.DefaultCreatedAt = registeredproviderDescCreatedAt.Default.(func() time.Time)
	// registeredproviderDescUpdatedAt is the schema descriptor for updated_at field.
	registeredproviderDescUpdatedAt := registeredproviderFields[4].Descriptor()
	// registeredprovider.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	registeredprovider.DefaultUpdatedAt = registeredproviderDescUpdatedAt.Default.(func() time.Time)
	// registeredprovider.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	registeredprovider.UpdateDefaultUpdatedAt = registeredproviderDescUpdatedAt.UpdateDefault.(func() time.Time)
	// registeredproviderDescID is the schema descriptor for id field.
	registeredproviderDescID := registeredproviderFields[0].Descriptor()
	// registeredprovider.DefaultID holds the default value on creation for the id field.
	registeredprovider.DefaultID = registeredproviderDescID.Default.(func() uuid.UUID)
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/pmontepagano/search/ent/predicate"
	"github.com/pmontepagano/search/ent/registeredprovider"
)

// RegisteredProviderDelete is the builder for deleting a RegisteredProvider entity.
type RegisteredProviderDelete struct {
	config
	hooks    []Hook
	mutation *RegisteredProviderMutation
}

// Where appends a list predicates to the RegisteredProviderDelete builder.
func (rpd *RegisteredProviderDelete) Where(ps ...predicate.RegisteredProvider) *RegisteredProviderDelete {
	rpd.mutation.Where(ps...)
	return rpd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (rpd *RegisteredProviderDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, RegisteredProviderMutation](ctx, rpd.sqlExec, rpd.mutation, rpd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (rpd *RegisteredProviderDelete) ExecX(ctx context.Context) int {
	n, err := rpd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (rpd *RegisteredProviderDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(registeredprovider.Table, sqlgraph.NewFieldSpec(registeredprovider.FieldID, field.TypeUUID))
	if ps := rpd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, rpd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	rpd.mutation.done = true
	return affected, err
}

// RegisteredProviderDeleteOne is the builder for deleting a single RegisteredProvider entity.
type RegisteredProviderDeleteOne struct {
	rpd *RegisteredProviderDelete
}

// Where appends a list predicates to the RegisteredProviderDelete builder.
func (rpdo *RegisteredProviderDeleteOne) Where(ps ...predicate.RegisteredProvider) *RegisteredProviderDeleteOne {
	rpdo.rpd.mutation.Where(ps...)
	return rpdo
}

// Exec executes the deletion query.
func (rpdo *RegisteredProviderDeleteOne) Exec(ctx context.Context) error {
	n, err := rpdo.rpd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{registeredprovider.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (rpdo *RegisteredProviderDeleteOne) ExecX(ctx context.Context) {
	if err := rpdo.Exec(ctx); err != nil {
		panic(err)
	}
}
